
esc_g431.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800527c  0800527c  0000627c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052bc  080052bc  0000700c  2**0
                  CONTENTS
  4 .ARM          00000008  080052bc  080052bc  000062bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052c4  080052c4  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052c4  080052c4  000062c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052c8  080052c8  000062c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080052cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  2000000c  080052d8  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080052d8  00007168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012394  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e4  00000000  00000000  000193d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0001bab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b11  00000000  00000000  0001c930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e9e7  00000000  00000000  0001d441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d29  00000000  00000000  0003be28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c859e  00000000  00000000  0004db51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001160ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bf0  00000000  00000000  00116134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00119d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005264 	.word	0x08005264

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08005264 	.word	0x08005264

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08c      	sub	sp, #48	@ 0x30
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800050e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800051a:	1d3b      	adds	r3, r7, #4
 800051c:	2220      	movs	r2, #32
 800051e:	2100      	movs	r1, #0
 8000520:	4618      	mov	r0, r3
 8000522:	f004 fe73 	bl	800520c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000526:	4b32      	ldr	r3, [pc, #200]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000528:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800052c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 800052e:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000530:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 8000534:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000536:	4b2e      	ldr	r3, [pc, #184]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800053c:	4b2c      	ldr	r3, [pc, #176]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800053e:	2200      	movs	r2, #0
 8000540:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000542:	4b2b      	ldr	r3, [pc, #172]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000544:	2200      	movs	r2, #0
 8000546:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000548:	4b29      	ldr	r3, [pc, #164]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800054a:	2200      	movs	r2, #0
 800054c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800054e:	4b28      	ldr	r3, [pc, #160]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000550:	2204      	movs	r2, #4
 8000552:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000554:	4b26      	ldr	r3, [pc, #152]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000556:	2200      	movs	r2, #0
 8000558:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800055a:	4b25      	ldr	r3, [pc, #148]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800055c:	2201      	movs	r2, #1
 800055e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000560:	4b23      	ldr	r3, [pc, #140]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000562:	2201      	movs	r2, #1
 8000564:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b22      	ldr	r3, [pc, #136]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056e:	4b20      	ldr	r3, [pc, #128]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800057a:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000582:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000588:	4b19      	ldr	r3, [pc, #100]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000590:	4817      	ldr	r0, [pc, #92]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 8000592:	f000 fdcb 	bl	800112c <HAL_ADC_Init>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800059c:	f000 f999 	bl	80008d2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005a8:	4619      	mov	r1, r3
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005ac:	f002 f86a 	bl	8002684 <HAL_ADCEx_MultiModeConfigChannel>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005b6:	f000 f98c 	bl	80008d2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005ba:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <MX_ADC1_Init+0xec>)
 80005bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005be:	2306      	movs	r3, #6
 80005c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 80005c2:	2302      	movs	r3, #2
 80005c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c6:	237f      	movs	r3, #127	@ 0x7f
 80005c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ca:	2304      	movs	r3, #4
 80005cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ce:	2300      	movs	r3, #0
 80005d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4806      	ldr	r0, [pc, #24]	@ (80005f0 <MX_ADC1_Init+0xe8>)
 80005d8:	f001 fa98 	bl	8001b0c <HAL_ADC_ConfigChannel>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80005e2:	f000 f976 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	3730      	adds	r7, #48	@ 0x30
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028
 80005f4:	2e300800 	.word	0x2e300800

080005f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b09a      	sub	sp, #104	@ 0x68
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000600:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]
 800060e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2244      	movs	r2, #68	@ 0x44
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f004 fdf7 	bl	800520c <memset>
  if(adcHandle->Instance==ADC1)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000626:	d13c      	bne.n	80006a2 <HAL_ADC_MspInit+0xaa>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000628:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800062c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800062e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000632:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4618      	mov	r0, r3
 800063a:	f003 f9fb 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000644:	f000 f945 	bl	80008d2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000648:	4b18      	ldr	r3, [pc, #96]	@ (80006ac <HAL_ADC_MspInit+0xb4>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800064c:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <HAL_ADC_MspInit+0xb4>)
 800064e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <HAL_ADC_MspInit+0xb4>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000658:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <HAL_ADC_MspInit+0xb4>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000664:	4a11      	ldr	r2, [pc, #68]	@ (80006ac <HAL_ADC_MspInit+0xb4>)
 8000666:	f043 0302 	orr.w	r3, r3, #2
 800066a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800066c:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <HAL_ADC_MspInit+0xb4>)
 800066e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000670:	f003 0302 	and.w	r3, r3, #2
 8000674:	60bb      	str	r3, [r7, #8]
 8000676:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = POT_IN_Pin;
 8000678:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067e:	2303      	movs	r3, #3
 8000680:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(POT_IN_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800068a:	4619      	mov	r1, r3
 800068c:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <HAL_ADC_MspInit+0xb8>)
 800068e:	f002 fa6d 	bl	8002b6c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000692:	2200      	movs	r2, #0
 8000694:	2100      	movs	r1, #0
 8000696:	2012      	movs	r0, #18
 8000698:	f002 f973 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800069c:	2012      	movs	r0, #18
 800069e:	f002 f98a 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3768      	adds	r7, #104	@ 0x68
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000400 	.word	0x48000400

080006b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006be:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006c0:	f043 0320 	orr.w	r3, r3, #32
 80006c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006c6:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ca:	f003 0320 	and.w	r3, r3, #32
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006d8:	f043 0302 	orr.w	r3, r3, #2
 80006dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006de:	4b0c      	ldr	r3, [pc, #48]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	f003 0302 	and.w	r3, r3, #2
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b09      	ldr	r3, [pc, #36]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	4a08      	ldr	r2, [pc, #32]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <MX_GPIO_Init+0x5c>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	607b      	str	r3, [r7, #4]
 8000700:	687b      	ldr	r3, [r7, #4]

}
 8000702:	bf00      	nop
 8000704:	3714      	adds	r7, #20
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	40021000 	.word	0x40021000

08000714 <HAL_ADC_ConvCpltCallback>:
uint32_t poten_value = 0;
uint32_t poten_raw = 0;
uint8_t do_filter = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	poten_raw = HAL_ADC_GetValue(&hadc1);
 800071c:	4806      	ldr	r0, [pc, #24]	@ (8000738 <HAL_ADC_ConvCpltCallback+0x24>)
 800071e:	f000 ffb9 	bl	8001694 <HAL_ADC_GetValue>
 8000722:	4603      	mov	r3, r0
 8000724:	4a05      	ldr	r2, [pc, #20]	@ (800073c <HAL_ADC_ConvCpltCallback+0x28>)
 8000726:	6013      	str	r3, [r2, #0]
	do_filter = 1;
 8000728:	4b05      	ldr	r3, [pc, #20]	@ (8000740 <HAL_ADC_ConvCpltCallback+0x2c>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000028 	.word	0x20000028
 800073c:	20000098 	.word	0x20000098
 8000740:	2000009c 	.word	0x2000009c

08000744 <poten_filter_normalize>:

// filter and normalize
void poten_filter_normalize()
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
  static uint32_t buff[adc_filter_len]= {0};
  static uint8_t i = 0;
  static uint32_t sum = 0;

	// filter
	sum -=buff[i];
 800074a:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <poten_filter_normalize+0x98>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <poten_filter_normalize+0x9c>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	4619      	mov	r1, r3
 8000754:	4b23      	ldr	r3, [pc, #140]	@ (80007e4 <poten_filter_normalize+0xa0>)
 8000756:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800075a:	1ad3      	subs	r3, r2, r3
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <poten_filter_normalize+0x98>)
 800075e:	6013      	str	r3, [r2, #0]
	buff[i] = poten_raw;
 8000760:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <poten_filter_normalize+0x9c>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	4619      	mov	r1, r3
 8000766:	4b20      	ldr	r3, [pc, #128]	@ (80007e8 <poten_filter_normalize+0xa4>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4a1e      	ldr	r2, [pc, #120]	@ (80007e4 <poten_filter_normalize+0xa0>)
 800076c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	sum += buff[i];
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <poten_filter_normalize+0x9c>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	461a      	mov	r2, r3
 8000776:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <poten_filter_normalize+0xa0>)
 8000778:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <poten_filter_normalize+0x98>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4413      	add	r3, r2
 8000782:	4a16      	ldr	r2, [pc, #88]	@ (80007dc <poten_filter_normalize+0x98>)
 8000784:	6013      	str	r3, [r2, #0]
	i = (i + 1) % adc_filter_len;
 8000786:	4b16      	ldr	r3, [pc, #88]	@ (80007e0 <poten_filter_normalize+0x9c>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <poten_filter_normalize+0xa8>)
 800078e:	fb83 1302 	smull	r1, r3, r3, r2
 8000792:	1099      	asrs	r1, r3, #2
 8000794:	17d3      	asrs	r3, r2, #31
 8000796:	1ac9      	subs	r1, r1, r3
 8000798:	460b      	mov	r3, r1
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	440b      	add	r3, r1
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	1ad1      	subs	r1, r2, r3
 80007a2:	b2ca      	uxtb	r2, r1
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <poten_filter_normalize+0x9c>)
 80007a6:	701a      	strb	r2, [r3, #0]
	uint32_t avg = sum/adc_filter_len;
 80007a8:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <poten_filter_normalize+0x98>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a10      	ldr	r2, [pc, #64]	@ (80007f0 <poten_filter_normalize+0xac>)
 80007ae:	fba2 2303 	umull	r2, r3, r2, r3
 80007b2:	08db      	lsrs	r3, r3, #3
 80007b4:	607b      	str	r3, [r7, #4]

	// normalize
	poten_value = avg * 1023 / 4095;
 80007b6:	687a      	ldr	r2, [r7, #4]
 80007b8:	4613      	mov	r3, r2
 80007ba:	029b      	lsls	r3, r3, #10
 80007bc:	1a9a      	subs	r2, r3, r2
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <poten_filter_normalize+0xb0>)
 80007c0:	fba3 1302 	umull	r1, r3, r3, r2
 80007c4:	1ad2      	subs	r2, r2, r3
 80007c6:	0852      	lsrs	r2, r2, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	0adb      	lsrs	r3, r3, #11
 80007cc:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <poten_filter_normalize+0xb4>)
 80007ce:	6013      	str	r3, [r2, #0]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr
 80007dc:	200000a0 	.word	0x200000a0
 80007e0:	200000a4 	.word	0x200000a4
 80007e4:	200000a8 	.word	0x200000a8
 80007e8:	20000098 	.word	0x20000098
 80007ec:	66666667 	.word	0x66666667
 80007f0:	cccccccd 	.word	0xcccccccd
 80007f4:	00100101 	.word	0x00100101
 80007f8:	20000094 	.word	0x20000094

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 f9bd 	bl	8000b7e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f81c 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f7ff ff54 	bl	80006b4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800080c:	f000 f8e2 	bl	80009d4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000810:	f7ff fe7a 	bl	8000508 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000814:	217f      	movs	r1, #127	@ 0x7f
 8000816:	4808      	ldr	r0, [pc, #32]	@ (8000838 <main+0x3c>)
 8000818:	f001 fea0 	bl	800255c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 800081c:	4806      	ldr	r0, [pc, #24]	@ (8000838 <main+0x3c>)
 800081e:	f000 fe09 	bl	8001434 <HAL_ADC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if( do_filter )
 8000822:	4b06      	ldr	r3, [pc, #24]	@ (800083c <main+0x40>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0fb      	beq.n	8000822 <main+0x26>
	  {
		  poten_filter_normalize();
 800082a:	f7ff ff8b 	bl	8000744 <poten_filter_normalize>
		  do_filter = 0;
 800082e:	4b03      	ldr	r3, [pc, #12]	@ (800083c <main+0x40>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
	  if( do_filter )
 8000834:	e7f5      	b.n	8000822 <main+0x26>
 8000836:	bf00      	nop
 8000838:	20000028 	.word	0x20000028
 800083c:	2000009c 	.word	0x2000009c

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0318 	add.w	r3, r7, #24
 800084a:	2238      	movs	r2, #56	@ 0x38
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fcdc 	bl	800520c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000862:	2000      	movs	r0, #0
 8000864:	f002 fb04 	bl	8002e70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000868:	2301      	movs	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800086c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000870:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000872:	2302      	movs	r3, #2
 8000874:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	2303      	movs	r3, #3
 8000878:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800087a:	2302      	movs	r3, #2
 800087c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800087e:	2355      	movs	r3, #85	@ 0x55
 8000880:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000882:	2302      	movs	r3, #2
 8000884:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000886:	2302      	movs	r3, #2
 8000888:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	4618      	mov	r0, r3
 8000894:	f002 fba0 	bl	8002fd8 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800089e:	f000 f818 	bl	80008d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	230f      	movs	r3, #15
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	2104      	movs	r1, #4
 80008ba:	4618      	mov	r0, r3
 80008bc:	f002 fe9e 	bl	80035fc <HAL_RCC_ClockConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008c6:	f000 f804 	bl	80008d2 <Error_Handler>
  }
}
 80008ca:	bf00      	nop
 80008cc:	3750      	adds	r7, #80	@ 0x50
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d6:	b672      	cpsid	i
}
 80008d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008da:	bf00      	nop
 80008dc:	e7fd      	b.n	80008da <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000924 <HAL_MspInit+0x44>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000924 <HAL_MspInit+0x44>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f2:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_MspInit+0x44>)
 80008f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008fe:	4b09      	ldr	r3, [pc, #36]	@ (8000924 <HAL_MspInit+0x44>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000902:	4a08      	ldr	r2, [pc, #32]	@ (8000924 <HAL_MspInit+0x44>)
 8000904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000908:	6593      	str	r3, [r2, #88]	@ 0x58
 800090a:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <HAL_MspInit+0x44>)
 800090c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800090e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000916:	f002 fb4f 	bl	8002fb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40021000 	.word	0x40021000

08000928 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <NMI_Handler+0x4>

08000930 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	bf00      	nop
 800093e:	e7fd      	b.n	800093c <MemManage_Handler+0x4>

08000940 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <UsageFault_Handler+0x4>

08000950 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr

0800095e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097e:	f000 f951 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <ADC1_2_IRQHandler+0x10>)
 800098e:	f000 fe8f 	bl	80016b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000028 	.word	0x20000028

0800099c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009a0:	4802      	ldr	r0, [pc, #8]	@ (80009ac <USART2_IRQHandler+0x10>)
 80009a2:	f003 fa87 	bl	8003eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000d0 	.word	0x200000d0

080009b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009b4:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <SystemInit+0x20>)
 80009b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <SystemInit+0x20>)
 80009bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	e000ed00 	.word	0xe000ed00

080009d4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009d8:	4b22      	ldr	r3, [pc, #136]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 80009da:	4a23      	ldr	r2, [pc, #140]	@ (8000a68 <MX_USART2_UART_Init+0x94>)
 80009dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009de:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 80009e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 80009fa:	220c      	movs	r2, #12
 80009fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009fe:	4b19      	ldr	r3, [pc, #100]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a04:	4b17      	ldr	r3, [pc, #92]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a10:	4b14      	ldr	r3, [pc, #80]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a16:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1c:	4811      	ldr	r0, [pc, #68]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a1e:	f003 f9f9 	bl	8003e14 <HAL_UART_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a28:	f7ff ff53 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	480d      	ldr	r0, [pc, #52]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a30:	f004 fb21 	bl	8005076 <HAL_UARTEx_SetTxFifoThreshold>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a3a:	f7ff ff4a 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4808      	ldr	r0, [pc, #32]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a42:	f004 fb56 	bl	80050f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a4c:	f7ff ff41 	bl	80008d2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	@ (8000a64 <MX_USART2_UART_Init+0x90>)
 8000a52:	f004 fad7 	bl	8005004 <HAL_UARTEx_DisableFifoMode>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a5c:	f7ff ff39 	bl	80008d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200000d0 	.word	0x200000d0
 8000a68:	40004400 	.word	0x40004400

08000a6c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09a      	sub	sp, #104	@ 0x68
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	2244      	movs	r2, #68	@ 0x44
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f004 fbbd 	bl	800520c <memset>
  if(uartHandle->Instance==USART2)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a22      	ldr	r2, [pc, #136]	@ (8000b20 <HAL_UART_MspInit+0xb4>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d13d      	bne.n	8000b18 <HAL_UART_MspInit+0xac>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f002 ffc3 	bl	8003a34 <HAL_RCCEx_PeriphCLKConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ab4:	f7ff ff0d 	bl	80008d2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <HAL_UART_MspInit+0xb8>)
 8000aba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000abc:	4a19      	ldr	r2, [pc, #100]	@ (8000b24 <HAL_UART_MspInit+0xb8>)
 8000abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ac2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ad2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad4:	4a13      	ldr	r2, [pc, #76]	@ (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ad6:	f043 0302 	orr.w	r3, r3, #2
 8000ada:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <HAL_UART_MspInit+0xb8>)
 8000ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae0:	f003 0302 	and.w	r3, r3, #2
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8000ae8:	2318      	movs	r3, #24
 8000aea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af8:	2307      	movs	r3, #7
 8000afa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <HAL_UART_MspInit+0xbc>)
 8000b04:	f002 f832 	bl	8002b6c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2026      	movs	r0, #38	@ 0x26
 8000b0e:	f001 ff38 	bl	8002982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b12:	2026      	movs	r0, #38	@ 0x26
 8000b14:	f001 ff4f 	bl	80029b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3768      	adds	r7, #104	@ 0x68
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40004400 	.word	0x40004400
 8000b24:	40021000 	.word	0x40021000
 8000b28:	48000400 	.word	0x48000400

08000b2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b2c:	480d      	ldr	r0, [pc, #52]	@ (8000b64 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b2e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b30:	f7ff ff3e 	bl	80009b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	@ (8000b6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	@ (8000b70 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f004 fb5f 	bl	800521c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b5e:	f7ff fe4d 	bl	80007fc <main>

08000b62 <LoopForever>:

LoopForever:
    b LoopForever
 8000b62:	e7fe      	b.n	8000b62 <LoopForever>
  ldr   r0, =_estack
 8000b64:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b70:	080052cc 	.word	0x080052cc
  ldr r2, =_sbss
 8000b74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b78:	20000168 	.word	0x20000168

08000b7c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <COMP1_2_3_IRQHandler>

08000b7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b84:	2300      	movs	r3, #0
 8000b86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f001 feef 	bl	800296c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f80e 	bl	8000bb0 <HAL_InitTick>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d002      	beq.n	8000ba0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	71fb      	strb	r3, [r7, #7]
 8000b9e:	e001      	b.n	8000ba4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba0:	f7ff fe9e 	bl	80008e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba4:	79fb      	ldrb	r3, [r7, #7]

}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bbc:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <HAL_InitTick+0x68>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d022      	beq.n	8000c0a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_InitTick+0x6c>)
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_InitTick+0x68>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000bd0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fefa 	bl	80029d2 <HAL_SYSTICK_Config>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d10f      	bne.n	8000c04 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d809      	bhi.n	8000bfe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf2:	f001 fec6 	bl	8002982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0x70>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e007      	b.n	8000c0e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	73fb      	strb	r3, [r7, #15]
 8000c02:	e004      	b.n	8000c0e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c04:	2301      	movs	r3, #1
 8000c06:	73fb      	strb	r3, [r7, #15]
 8000c08:	e001      	b.n	8000c0e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	20000000 	.word	0x20000000
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	@ (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	681a      	ldr	r2, [r3, #0]
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <HAL_IncTick+0x20>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4413      	add	r3, r2
 8000c32:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <HAL_IncTick+0x1c>)
 8000c34:	6013      	str	r3, [r2, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	20000164 	.word	0x20000164
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b03      	ldr	r3, [pc, #12]	@ (8000c5c <HAL_GetTick+0x14>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	20000164 	.word	0x20000164

08000c60 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	609a      	str	r2, [r3, #8]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	689b      	ldr	r3, [r3, #8]
 8000c94:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	431a      	orrs	r2, r3
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
}
 8000ca0:	bf00      	nop
 8000ca2:	370c      	adds	r7, #12
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b087      	sub	sp, #28
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
 8000cd4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	3360      	adds	r3, #96	@ 0x60
 8000cda:	461a      	mov	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	4413      	add	r3, r2
 8000ce2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <LL_ADC_SetOffset+0x44>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8000cf2:	683a      	ldr	r2, [r7, #0]
 8000cf4:	430a      	orrs	r2, r1
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000d00:	bf00      	nop
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	03fff000 	.word	0x03fff000

08000d10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	3360      	adds	r3, #96	@ 0x60
 8000d1e:	461a      	mov	r2, r3
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	3360      	adds	r3, #96	@ 0x60
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	431a      	orrs	r2, r3
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000d66:	bf00      	nop
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b087      	sub	sp, #28
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	60f8      	str	r0, [r7, #12]
 8000d7a:	60b9      	str	r1, [r7, #8]
 8000d7c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	3360      	adds	r3, #96	@ 0x60
 8000d82:	461a      	mov	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	431a      	orrs	r2, r3
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8000d9c:	bf00      	nop
 8000d9e:	371c      	adds	r7, #28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b087      	sub	sp, #28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3360      	adds	r3, #96	@ 0x60
 8000db8:	461a      	mov	r2, r3
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	4413      	add	r3, r2
 8000dc0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	431a      	orrs	r2, r3
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8000dd2:	bf00      	nop
 8000dd4:	371c      	adds	r7, #28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000dde:	b480      	push	{r7}
 8000de0:	b083      	sub	sp, #12
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	695b      	ldr	r3, [r3, #20]
 8000dec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	431a      	orrs	r2, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	615a      	str	r2, [r3, #20]
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d101      	bne.n	8000e1c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e000      	b.n	8000e1e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr

08000e2a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b087      	sub	sp, #28
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3330      	adds	r3, #48	@ 0x30
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	0a1b      	lsrs	r3, r3, #8
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	4413      	add	r3, r2
 8000e48:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	f003 031f 	and.w	r3, r3, #31
 8000e54:	211f      	movs	r1, #31
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	0e9b      	lsrs	r3, r3, #26
 8000e62:	f003 011f 	and.w	r1, r3, #31
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000e70:	431a      	orrs	r2, r3
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000e76:	bf00      	nop
 8000e78:	371c      	adds	r7, #28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000e82:	b480      	push	{r7}
 8000e84:	b083      	sub	sp, #12
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e8e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3314      	adds	r3, #20
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	0e5b      	lsrs	r3, r3, #25
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	4413      	add	r3, r2
 8000ec6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	0d1b      	lsrs	r3, r3, #20
 8000ed0:	f003 031f 	and.w	r3, r3, #31
 8000ed4:	2107      	movs	r1, #7
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	401a      	ands	r2, r3
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	0d1b      	lsrs	r3, r3, #20
 8000ee2:	f003 031f 	and.w	r3, r3, #31
 8000ee6:	6879      	ldr	r1, [r7, #4]
 8000ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8000eec:	431a      	orrs	r2, r3
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000ef2:	bf00      	nop
 8000ef4:	371c      	adds	r7, #28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
	...

08000f00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	401a      	ands	r2, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0318 	and.w	r3, r3, #24
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000f24:	40d9      	lsrs	r1, r3
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	400b      	ands	r3, r1
 8000f2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	0007ffff 	.word	0x0007ffff

08000f48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 031f 	and.w	r3, r3, #31
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000f90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	6093      	str	r3, [r2, #8]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fb8:	d101      	bne.n	8000fbe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000fbe:	2300      	movs	r3, #0
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000fdc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000fe0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001004:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001008:	d101      	bne.n	800100e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800102c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001030:	f043 0201 	orr.w	r2, r3, #1
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001054:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001058:	f043 0202 	orr.w	r2, r3, #2
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	2b01      	cmp	r3, #1
 800107e:	d101      	bne.n	8001084 <LL_ADC_IsEnabled+0x18>
 8001080:	2301      	movs	r3, #1
 8001082:	e000      	b.n	8001086 <LL_ADC_IsEnabled+0x1a>
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d101      	bne.n	80010aa <LL_ADC_IsDisableOngoing+0x18>
 80010a6:	2301      	movs	r3, #1
 80010a8:	e000      	b.n	80010ac <LL_ADC_IsDisableOngoing+0x1a>
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80010c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80010cc:	f043 0204 	orr.w	r2, r3, #4
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	f003 0304 	and.w	r3, r3, #4
 80010f0:	2b04      	cmp	r3, #4
 80010f2:	d101      	bne.n	80010f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001106:	b480      	push	{r7}
 8001108:	b083      	sub	sp, #12
 800110a:	af00      	add	r7, sp, #0
 800110c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0308 	and.w	r3, r3, #8
 8001116:	2b08      	cmp	r3, #8
 8001118:	d101      	bne.n	800111e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001134:	2300      	movs	r3, #0
 8001136:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e167      	b.n	8001416 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fa4f 	bl	80005f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff19 	bl	8000fa4 <LL_ADC_IsDeepPowerDownEnabled>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d004      	beq.n	8001182 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff feff 	bl	8000f80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff34 	bl	8000ff4 <LL_ADC_IsInternalRegulatorEnabled>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d115      	bne.n	80011be <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff18 	bl	8000fcc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800119c:	4ba0      	ldr	r3, [pc, #640]	@ (8001420 <HAL_ADC_Init+0x2f4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	099b      	lsrs	r3, r3, #6
 80011a2:	4aa0      	ldr	r2, [pc, #640]	@ (8001424 <HAL_ADC_Init+0x2f8>)
 80011a4:	fba2 2303 	umull	r2, r3, r2, r3
 80011a8:	099b      	lsrs	r3, r3, #6
 80011aa:	3301      	adds	r3, #1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011b0:	e002      	b.n	80011b8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f9      	bne.n	80011b2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff16 	bl	8000ff4 <LL_ADC_IsInternalRegulatorEnabled>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d10d      	bne.n	80011ea <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011d2:	f043 0210 	orr.w	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011de:	f043 0201 	orr.w	r2, r3, #1
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80011e6:	2301      	movs	r3, #1
 80011e8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff76 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 80011f4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	f040 8100 	bne.w	8001404 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	2b00      	cmp	r3, #0
 8001208:	f040 80fc 	bne.w	8001404 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001210:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001214:	f043 0202 	orr.w	r2, r3, #2
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff23 	bl	800106c <LL_ADC_IsEnabled>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d111      	bne.n	8001250 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800122c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001230:	f7ff ff1c 	bl	800106c <LL_ADC_IsEnabled>
 8001234:	4604      	mov	r4, r0
 8001236:	487c      	ldr	r0, [pc, #496]	@ (8001428 <HAL_ADC_Init+0x2fc>)
 8001238:	f7ff ff18 	bl	800106c <LL_ADC_IsEnabled>
 800123c:	4603      	mov	r3, r0
 800123e:	4323      	orrs	r3, r4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d105      	bne.n	8001250 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4619      	mov	r1, r3
 800124a:	4878      	ldr	r0, [pc, #480]	@ (800142c <HAL_ADC_Init+0x300>)
 800124c:	f7ff fd08 	bl	8000c60 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	7f5b      	ldrb	r3, [r3, #29]
 8001254:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800125a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001260:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001266:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800126e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001270:	4313      	orrs	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800127a:	2b01      	cmp	r3, #1
 800127c:	d106      	bne.n	800128c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001282:	3b01      	subs	r3, #1
 8001284:	045b      	lsls	r3, r3, #17
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001290:	2b00      	cmp	r3, #0
 8001292:	d009      	beq.n	80012a8 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001298:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80012a2:	69ba      	ldr	r2, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	4b60      	ldr	r3, [pc, #384]	@ (8001430 <HAL_ADC_Init+0x304>)
 80012b0:	4013      	ands	r3, r2
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	69b9      	ldr	r1, [r7, #24]
 80012b8:	430b      	orrs	r3, r1
 80012ba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff15 	bl	8001106 <LL_ADC_INJ_IsConversionOngoing>
 80012dc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d16d      	bne.n	80013c0 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d16a      	bne.n	80013c0 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012ee:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80012f6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001306:	f023 0302 	bic.w	r3, r3, #2
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	6812      	ldr	r2, [r2, #0]
 800130e:	69b9      	ldr	r1, [r7, #24]
 8001310:	430b      	orrs	r3, r1
 8001312:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d017      	beq.n	800134c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	691a      	ldr	r2, [r3, #16]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800132a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001334:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001338:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6911      	ldr	r1, [r2, #16]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6812      	ldr	r2, [r2, #0]
 8001344:	430b      	orrs	r3, r1
 8001346:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800134a:	e013      	b.n	8001374 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	691a      	ldr	r2, [r3, #16]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800135a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800136c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001370:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800137a:	2b01      	cmp	r3, #1
 800137c:	d118      	bne.n	80013b0 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001388:	f023 0304 	bic.w	r3, r3, #4
 800138c:	687a      	ldr	r2, [r7, #4]
 800138e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001394:	4311      	orrs	r1, r2
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800139a:	4311      	orrs	r1, r2
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80013a0:	430a      	orrs	r2, r1
 80013a2:	431a      	orrs	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f042 0201 	orr.w	r2, r2, #1
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	e007      	b.n	80013c0 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	691a      	ldr	r2, [r3, #16]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f022 0201 	bic.w	r2, r2, #1
 80013be:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10c      	bne.n	80013e2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f023 010f 	bic.w	r1, r3, #15
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a1b      	ldr	r3, [r3, #32]
 80013d6:	1e5a      	subs	r2, r3, #1
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	430a      	orrs	r2, r1
 80013de:	631a      	str	r2, [r3, #48]	@ 0x30
 80013e0:	e007      	b.n	80013f2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f022 020f 	bic.w	r2, r2, #15
 80013f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f6:	f023 0303 	bic.w	r3, r3, #3
 80013fa:	f043 0201 	orr.w	r2, r3, #1
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001402:	e007      	b.n	8001414 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001408:	f043 0210 	orr.w	r2, r3, #16
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001414:	7ffb      	ldrb	r3, [r7, #31]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000
 8001424:	053e2d63 	.word	0x053e2d63
 8001428:	50000100 	.word	0x50000100
 800142c:	50000300 	.word	0x50000300
 8001430:	fff04007 	.word	0xfff04007

08001434 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800143c:	4893      	ldr	r0, [pc, #588]	@ (800168c <HAL_ADC_Start_IT+0x258>)
 800143e:	f7ff fd83 	bl	8000f48 <LL_ADC_GetMultimode>
 8001442:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fe49 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	f040 8113 	bne.w	800167c <HAL_ADC_Start_IT+0x248>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ADC_Start_IT+0x30>
 8001460:	2302      	movs	r3, #2
 8001462:	e10e      	b.n	8001682 <HAL_ADC_Start_IT+0x24e>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f000 ff3d 	bl	80022ec <ADC_Enable>
 8001472:	4603      	mov	r3, r0
 8001474:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	2b00      	cmp	r3, #0
 800147a:	f040 80fa 	bne.w	8001672 <HAL_ADC_Start_IT+0x23e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001482:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001486:	f023 0301 	bic.w	r3, r3, #1
 800148a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7e      	ldr	r2, [pc, #504]	@ (8001690 <HAL_ADC_Start_IT+0x25c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d002      	beq.n	80014a2 <HAL_ADC_Start_IT+0x6e>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	e001      	b.n	80014a6 <HAL_ADC_Start_IT+0x72>
 80014a2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d002      	beq.n	80014b4 <HAL_ADC_Start_IT+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d105      	bne.n	80014c0 <HAL_ADC_Start_IT+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <HAL_ADC_Start_IT+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d0:	f023 0206 	bic.w	r2, r3, #6
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	661a      	str	r2, [r3, #96]	@ 0x60
 80014d8:	e002      	b.n	80014e0 <HAL_ADC_Start_IT+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	221c      	movs	r2, #28
 80014e6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 021c 	bic.w	r2, r2, #28
 80014fe:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d108      	bne.n	800151a <HAL_ADC_Start_IT+0xe6>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	685a      	ldr	r2, [r3, #4]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f042 0208 	orr.w	r2, r2, #8
 8001516:	605a      	str	r2, [r3, #4]
          break;
 8001518:	e008      	b.n	800152c <HAL_ADC_Start_IT+0xf8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	685a      	ldr	r2, [r3, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0204 	orr.w	r2, r2, #4
 8001528:	605a      	str	r2, [r3, #4]
          break;
 800152a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001530:	2b00      	cmp	r3, #0
 8001532:	d107      	bne.n	8001544 <HAL_ADC_Start_IT+0x110>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0210 	orr.w	r2, r2, #16
 8001542:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a51      	ldr	r2, [pc, #324]	@ (8001690 <HAL_ADC_Start_IT+0x25c>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d002      	beq.n	8001554 <HAL_ADC_Start_IT+0x120>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	e001      	b.n	8001558 <HAL_ADC_Start_IT+0x124>
 8001554:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	4293      	cmp	r3, r2
 800155e:	d008      	beq.n	8001572 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d005      	beq.n	8001572 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b05      	cmp	r3, #5
 800156a:	d002      	beq.n	8001572 <HAL_ADC_Start_IT+0x13e>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	2b09      	cmp	r3, #9
 8001570:	d13a      	bne.n	80015e8 <HAL_ADC_Start_IT+0x1b4>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800157c:	2b00      	cmp	r3, #0
 800157e:	d02d      	beq.n	80015dc <HAL_ADC_Start_IT+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001584:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001588:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	699b      	ldr	r3, [r3, #24]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d110      	bne.n	80015ba <HAL_ADC_Start_IT+0x186>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f022 0220 	bic.w	r2, r2, #32
 80015a6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80015b6:	605a      	str	r2, [r3, #4]
              break;
 80015b8:	e010      	b.n	80015dc <HAL_ADC_Start_IT+0x1a8>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015c8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f042 0220 	orr.w	r2, r2, #32
 80015d8:	605a      	str	r2, [r3, #4]
              break;
 80015da:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff fd69 	bl	80010b8 <LL_ADC_REG_StartConversion>
 80015e6:	e04b      	b.n	8001680 <HAL_ADC_Start_IT+0x24c>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ec:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a25      	ldr	r2, [pc, #148]	@ (8001690 <HAL_ADC_Start_IT+0x25c>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d002      	beq.n	8001604 <HAL_ADC_Start_IT+0x1d0>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	e001      	b.n	8001608 <HAL_ADC_Start_IT+0x1d4>
 8001604:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001608:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d034      	beq.n	8001680 <HAL_ADC_Start_IT+0x24c>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800161a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800161e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b08      	cmp	r3, #8
 800162c:	d110      	bne.n	8001650 <HAL_ADC_Start_IT+0x21c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0220 	bic.w	r2, r2, #32
 800163c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800164c:	605a      	str	r2, [r3, #4]
              break;
 800164e:	e017      	b.n	8001680 <HAL_ADC_Start_IT+0x24c>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800165e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0220 	orr.w	r2, r2, #32
 800166e:	605a      	str	r2, [r3, #4]
              break;
 8001670:	e006      	b.n	8001680 <HAL_ADC_Start_IT+0x24c>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800167a:	e001      	b.n	8001680 <HAL_ADC_Start_IT+0x24c>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800167c:	2302      	movs	r3, #2
 800167e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001680:	7dfb      	ldrb	r3, [r7, #23]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	50000300 	.word	0x50000300
 8001690:	50000100 	.word	0x50000100

08001694 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
	...

080016b0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80016b8:	2300      	movs	r3, #0
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80016cc:	4883      	ldr	r0, [pc, #524]	@ (80018dc <HAL_ADC_IRQHandler+0x22c>)
 80016ce:	f7ff fc3b 	bl	8000f48 <LL_ADC_GetMultimode>
 80016d2:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d017      	beq.n	800170e <HAL_ADC_IRQHandler+0x5e>
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d012      	beq.n	800170e <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 ffb5 	bl	8002670 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2202      	movs	r2, #2
 800170c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_ADC_IRQHandler+0x72>
 8001718:	69bb      	ldr	r3, [r7, #24]
 800171a:	f003 0304 	and.w	r3, r3, #4
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10a      	bne.n	8001738 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 8085 	beq.w	8001838 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d07f      	beq.n	8001838 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173c:	f003 0310 	and.w	r3, r3, #16
 8001740:	2b00      	cmp	r3, #0
 8001742:	d105      	bne.n	8001750 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001748:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff fb55 	bl	8000e04 <LL_ADC_REG_IsTriggerSourceSWStart>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d064      	beq.n	800182a <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a5e      	ldr	r2, [pc, #376]	@ (80018e0 <HAL_ADC_IRQHandler+0x230>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d002      	beq.n	8001770 <HAL_ADC_IRQHandler+0xc0>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e001      	b.n	8001774 <HAL_ADC_IRQHandler+0xc4>
 8001770:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	4293      	cmp	r3, r2
 800177a:	d008      	beq.n	800178e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d002      	beq.n	800178e <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	2b09      	cmp	r3, #9
 800178c:	d104      	bne.n	8001798 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	623b      	str	r3, [r7, #32]
 8001796:	e00d      	b.n	80017b4 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a50      	ldr	r2, [pc, #320]	@ (80018e0 <HAL_ADC_IRQHandler+0x230>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d002      	beq.n	80017a8 <HAL_ADC_IRQHandler+0xf8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	e001      	b.n	80017ac <HAL_ADC_IRQHandler+0xfc>
 80017a8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017ac:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d135      	bne.n	800182a <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0308 	and.w	r3, r3, #8
 80017c8:	2b08      	cmp	r3, #8
 80017ca:	d12e      	bne.n	800182a <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fc85 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d11a      	bne.n	8001812 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f022 020c 	bic.w	r2, r2, #12
 80017ea:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d112      	bne.n	800182a <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001808:	f043 0201 	orr.w	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001810:	e00b      	b.n	800182a <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	f043 0210 	orr.w	r2, r3, #16
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001822:	f043 0201 	orr.w	r2, r3, #1
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f7fe ff72 	bl	8000714 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	220c      	movs	r2, #12
 8001836:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b00      	cmp	r3, #0
 8001840:	d004      	beq.n	800184c <HAL_ADC_IRQHandler+0x19c>
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	f003 0320 	and.w	r3, r3, #32
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10b      	bne.n	8001864 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 809e 	beq.w	8001994 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8098 	beq.w	8001994 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	f003 0310 	and.w	r3, r3, #16
 800186c:	2b00      	cmp	r3, #0
 800186e:	d105      	bne.n	800187c <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001874:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fafe 	bl	8000e82 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001886:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f7ff fab9 	bl	8000e04 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001892:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a11      	ldr	r2, [pc, #68]	@ (80018e0 <HAL_ADC_IRQHandler+0x230>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d002      	beq.n	80018a4 <HAL_ADC_IRQHandler+0x1f4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	e001      	b.n	80018a8 <HAL_ADC_IRQHandler+0x1f8>
 80018a4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	6812      	ldr	r2, [r2, #0]
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d008      	beq.n	80018c2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d005      	beq.n	80018c2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b06      	cmp	r3, #6
 80018ba:	d002      	beq.n	80018c2 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b07      	cmp	r3, #7
 80018c0:	d104      	bne.n	80018cc <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	623b      	str	r3, [r7, #32]
 80018ca:	e011      	b.n	80018f0 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a03      	ldr	r2, [pc, #12]	@ (80018e0 <HAL_ADC_IRQHandler+0x230>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d006      	beq.n	80018e4 <HAL_ADC_IRQHandler+0x234>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	e005      	b.n	80018e8 <HAL_ADC_IRQHandler+0x238>
 80018dc:	50000300 	.word	0x50000300
 80018e0:	50000100 	.word	0x50000100
 80018e4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80018e8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d047      	beq.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d007      	beq.n	8001910 <HAL_ADC_IRQHandler+0x260>
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d03f      	beq.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800190c:	2b00      	cmp	r3, #0
 800190e:	d13a      	bne.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800191a:	2b40      	cmp	r3, #64	@ 0x40
 800191c:	d133      	bne.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800191e:	6a3b      	ldr	r3, [r7, #32]
 8001920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d12e      	bne.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fbea 	bl	8001106 <LL_ADC_INJ_IsConversionOngoing>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d11a      	bne.n	800196e <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001946:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800194c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d112      	bne.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800196c:	e00b      	b.n	8001986 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800197e:	f043 0201 	orr.w	r2, r3, #1
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	f000 fe4a 	bl	8002620 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2260      	movs	r2, #96	@ 0x60
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800199a:	2b00      	cmp	r3, #0
 800199c:	d011      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x312>
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00c      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f895 	bl	8001ae4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2280      	movs	r2, #128	@ 0x80
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d012      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x342>
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00d      	beq.n	80019f2 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019da:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 fe30 	bl	8002648 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d012      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x372>
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d00d      	beq.n	8001a22 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fe22 	bl	800265c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d036      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ea>
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d031      	beq.n	8001a9a <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a42:	e014      	b.n	8001a6e <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d008      	beq.n	8001a5c <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a4a:	4825      	ldr	r0, [pc, #148]	@ (8001ae0 <HAL_ADC_IRQHandler+0x430>)
 8001a4c:	f7ff fa8a 	bl	8000f64 <LL_ADC_GetMultiDMATransfer>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001a56:	2301      	movs	r3, #1
 8001a58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a5a:	e008      	b.n	8001a6e <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d10e      	bne.n	8001a92 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a78:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a84:	f043 0202 	orr.w	r2, r3, #2
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f833 	bl	8001af8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2210      	movs	r2, #16
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d018      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x426>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d013      	beq.n	8001ad6 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001abe:	f043 0208 	orr.w	r2, r3, #8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ace:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fdaf 	bl	8002634 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	@ 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	50000300 	.word	0x50000300

08001ae4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d101      	bne.n	8001b2e <HAL_ADC_ConfigChannel+0x22>
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	e3c8      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x7b4>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fad0 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 83ad 	bne.w	80022a2 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6818      	ldr	r0, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	6859      	ldr	r1, [r3, #4]
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	461a      	mov	r2, r3
 8001b56:	f7ff f968 	bl	8000e2a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fabe 	bl	80010e0 <LL_ADC_REG_IsConversionOngoing>
 8001b64:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff faca 	bl	8001106 <LL_ADC_INJ_IsConversionOngoing>
 8001b72:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f040 81d9 	bne.w	8001f32 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	f040 81d4 	bne.w	8001f32 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b92:	d10f      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6818      	ldr	r0, [r3, #0]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7ff f982 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff f916 	bl	8000dde <LL_ADC_SetSamplingTimeCommonConfig>
 8001bb2:	e00e      	b.n	8001bd2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	f7ff f971 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f906 	bl	8000dde <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	08db      	lsrs	r3, r3, #3
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d022      	beq.n	8001c3a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6919      	ldr	r1, [r3, #16]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c04:	f7ff f860 	bl	8000cc8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6818      	ldr	r0, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	6919      	ldr	r1, [r3, #16]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	461a      	mov	r2, r3
 8001c16:	f7ff f8ac 	bl	8000d72 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6818      	ldr	r0, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_ADC_ConfigChannel+0x124>
 8001c2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c2e:	e000      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x126>
 8001c30:	2300      	movs	r3, #0
 8001c32:	461a      	mov	r2, r3
 8001c34:	f7ff f8b8 	bl	8000da8 <LL_ADC_SetOffsetSaturation>
 8001c38:	e17b      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f865 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001c46:	4603      	mov	r3, r0
 8001c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d10a      	bne.n	8001c66 <HAL_ADC_ConfigChannel+0x15a>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f85a 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	0e9b      	lsrs	r3, r3, #26
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	e01e      	b.n	8001ca4 <HAL_ADC_ConfigChannel+0x198>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff f84f 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001c72:	4603      	mov	r3, r0
 8001c74:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001c7c:	fa93 f3a3 	rbit	r3, r3
 8001c80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c84:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001c88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8001c94:	2320      	movs	r3, #32
 8001c96:	e004      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8001c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001c9c:	fab3 f383 	clz	r3, r3
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d105      	bne.n	8001cbc <HAL_ADC_ConfigChannel+0x1b0>
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	0e9b      	lsrs	r3, r3, #26
 8001cb6:	f003 031f 	and.w	r3, r3, #31
 8001cba:	e018      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1e2>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001cd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e004      	b.n	8001cee <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8001ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001ce8:	fab3 f383 	clz	r3, r3
 8001cec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d106      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff f81e 	bl	8000d3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff f802 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x220>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fff7 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	0e9b      	lsrs	r3, r3, #26
 8001d26:	f003 021f 	and.w	r2, r3, #31
 8001d2a:	e01e      	b.n	8001d6a <HAL_ADC_ConfigChannel+0x25e>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2101      	movs	r1, #1
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe ffec 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001d4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001d52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8001d5a:	2320      	movs	r3, #32
 8001d5c:	e004      	b.n	8001d68 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8001d5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001d62:	fab3 f383 	clz	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d105      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x276>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0e9b      	lsrs	r3, r3, #26
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	e018      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2a8>
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001d8e:	fa93 f3a3 	rbit	r3, r3
 8001d92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001d96:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001d9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001d9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8001da6:	2320      	movs	r3, #32
 8001da8:	e004      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8001daa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001dae:	fab3 f383 	clz	r3, r3
 8001db2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d106      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe ffbb 	bl	8000d3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2102      	movs	r1, #2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ff9f 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10a      	bne.n	8001df2 <HAL_ADC_ConfigChannel+0x2e6>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2102      	movs	r1, #2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7fe ff94 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001de8:	4603      	mov	r3, r0
 8001dea:	0e9b      	lsrs	r3, r3, #26
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	e01e      	b.n	8001e30 <HAL_ADC_ConfigChannel+0x324>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2102      	movs	r1, #2
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe ff89 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e08:	fa93 f3a3 	rbit	r3, r3
 8001e0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e14:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8001e20:	2320      	movs	r3, #32
 8001e22:	e004      	b.n	8001e2e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8001e24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e28:	fab3 f383 	clz	r3, r3
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x33c>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	0e9b      	lsrs	r3, r3, #26
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	e016      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x36a>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001e5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8001e68:	2320      	movs	r3, #32
 8001e6a:	e004      	b.n	8001e76 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8001e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e70:	fab3 f383 	clz	r3, r3
 8001e74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d106      	bne.n	8001e88 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2102      	movs	r1, #2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7fe ff5a 	bl	8000d3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2103      	movs	r1, #3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ff3e 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10a      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x3a8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2103      	movs	r1, #3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7fe ff33 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	0e9b      	lsrs	r3, r3, #26
 8001eae:	f003 021f 	and.w	r2, r3, #31
 8001eb2:	e017      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x3d8>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2103      	movs	r1, #3
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe ff28 	bl	8000d10 <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001ec6:	fa93 f3a3 	rbit	r3, r3
 8001eca:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001ecc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ece:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001ed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e003      	b.n	8001ee2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8001eda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d105      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x3f0>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	e011      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x414>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f04:	fa93 f3a3 	rbit	r3, r3
 8001f08:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d101      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8001f14:	2320      	movs	r3, #32
 8001f16:	e003      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8001f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f1a:	fab3 f383 	clz	r3, r3
 8001f1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d106      	bne.n	8001f32 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	2103      	movs	r1, #3
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe ff05 	bl	8000d3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f898 	bl	800106c <LL_ADC_IsEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8140 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	6819      	ldr	r1, [r3, #0]
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f7fe ffd5 	bl	8000f00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	4a8f      	ldr	r2, [pc, #572]	@ (8002198 <HAL_ADC_ConfigChannel+0x68c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	f040 8131 	bne.w	80021c4 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10b      	bne.n	8001f8a <HAL_ADC_ConfigChannel+0x47e>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	0e9b      	lsrs	r3, r3, #26
 8001f78:	3301      	adds	r3, #1
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2b09      	cmp	r3, #9
 8001f80:	bf94      	ite	ls
 8001f82:	2301      	movls	r3, #1
 8001f84:	2300      	movhi	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	e019      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x4b2>
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f92:	fa93 f3a3 	rbit	r3, r3
 8001f96:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8001f98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001f9a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8001f9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e003      	b.n	8001fae <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8001fa6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	3301      	adds	r3, #1
 8001fb0:	f003 031f 	and.w	r3, r3, #31
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	bf94      	ite	ls
 8001fb8:	2301      	movls	r3, #1
 8001fba:	2300      	movhi	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d079      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d107      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x4d2>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	0e9b      	lsrs	r3, r3, #26
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fdc:	e015      	b.n	800200a <HAL_ADC_ConfigChannel+0x4fe>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8001fec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fee:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8001ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e003      	b.n	8002002 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8001ffa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ffc:	fab3 f383 	clz	r3, r3
 8002000:	b2db      	uxtb	r3, r3
 8002002:	3301      	adds	r3, #1
 8002004:	069b      	lsls	r3, r3, #26
 8002006:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_ADC_ConfigChannel+0x51e>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	0e9b      	lsrs	r3, r3, #26
 800201c:	3301      	adds	r3, #1
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2101      	movs	r1, #1
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	e017      	b.n	800205a <HAL_ADC_ConfigChannel+0x54e>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002038:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800203a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800203c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e003      	b.n	800204e <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002046:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002048:	fab3 f383 	clz	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	3301      	adds	r3, #1
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2101      	movs	r1, #1
 8002056:	fa01 f303 	lsl.w	r3, r1, r3
 800205a:	ea42 0103 	orr.w	r1, r2, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x574>
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	0e9b      	lsrs	r3, r3, #26
 8002070:	3301      	adds	r3, #1
 8002072:	f003 021f 	and.w	r2, r3, #31
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	051b      	lsls	r3, r3, #20
 800207e:	e018      	b.n	80020b2 <HAL_ADC_ConfigChannel+0x5a6>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002088:	fa93 f3a3 	rbit	r3, r3
 800208c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800208e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002090:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002098:	2320      	movs	r3, #32
 800209a:	e003      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800209c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 021f 	and.w	r2, r3, #31
 80020aa:	4613      	mov	r3, r2
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4413      	add	r3, r2
 80020b0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020b2:	430b      	orrs	r3, r1
 80020b4:	e081      	b.n	80021ba <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d107      	bne.n	80020d2 <HAL_ADC_ConfigChannel+0x5c6>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	0e9b      	lsrs	r3, r3, #26
 80020c8:	3301      	adds	r3, #1
 80020ca:	069b      	lsls	r3, r3, #26
 80020cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020d0:	e015      	b.n	80020fe <HAL_ADC_ConfigChannel+0x5f2>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020da:	fa93 f3a3 	rbit	r3, r3
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80020e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80020e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d101      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80020ea:	2320      	movs	r3, #32
 80020ec:	e003      	b.n	80020f6 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80020ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	069b      	lsls	r3, r3, #26
 80020fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002106:	2b00      	cmp	r3, #0
 8002108:	d109      	bne.n	800211e <HAL_ADC_ConfigChannel+0x612>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	0e9b      	lsrs	r3, r3, #26
 8002110:	3301      	adds	r3, #1
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	2101      	movs	r1, #1
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	e017      	b.n	800214e <HAL_ADC_ConfigChannel+0x642>
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	61fb      	str	r3, [r7, #28]
  return result;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002132:	2b00      	cmp	r3, #0
 8002134:	d101      	bne.n	800213a <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002136:	2320      	movs	r3, #32
 8002138:	e003      	b.n	8002142 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	3301      	adds	r3, #1
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2101      	movs	r1, #1
 800214a:	fa01 f303 	lsl.w	r3, r1, r3
 800214e:	ea42 0103 	orr.w	r1, r2, r3
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10d      	bne.n	800217a <HAL_ADC_ConfigChannel+0x66e>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0e9b      	lsrs	r3, r3, #26
 8002164:	3301      	adds	r3, #1
 8002166:	f003 021f 	and.w	r2, r3, #31
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	3b1e      	subs	r3, #30
 8002172:	051b      	lsls	r3, r3, #20
 8002174:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002178:	e01e      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x6ac>
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	fa93 f3a3 	rbit	r3, r3
 8002186:	613b      	str	r3, [r7, #16]
  return result;
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d104      	bne.n	800219c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002192:	2320      	movs	r3, #32
 8002194:	e006      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x698>
 8002196:	bf00      	nop
 8002198:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fab3 f383 	clz	r3, r3
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	3301      	adds	r3, #1
 80021a6:	f003 021f 	and.w	r2, r3, #31
 80021aa:	4613      	mov	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4413      	add	r3, r2
 80021b0:	3b1e      	subs	r3, #30
 80021b2:	051b      	lsls	r3, r3, #20
 80021b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fe72 	bl	8000ea8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b3f      	ldr	r3, [pc, #252]	@ (80022c8 <HAL_ADC_ConfigChannel+0x7bc>)
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d071      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021d0:	483e      	ldr	r0, [pc, #248]	@ (80022cc <HAL_ADC_ConfigChannel+0x7c0>)
 80021d2:	f7fe fd6b 	bl	8000cac <LL_ADC_GetCommonPathInternalCh>
 80021d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a3c      	ldr	r2, [pc, #240]	@ (80022d0 <HAL_ADC_ConfigChannel+0x7c4>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d004      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x6e2>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	@ (80022d4 <HAL_ADC_ConfigChannel+0x7c8>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d127      	bne.n	800223e <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d121      	bne.n	800223e <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002202:	d157      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002204:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002208:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800220c:	4619      	mov	r1, r3
 800220e:	482f      	ldr	r0, [pc, #188]	@ (80022cc <HAL_ADC_ConfigChannel+0x7c0>)
 8002210:	f7fe fd39 	bl	8000c86 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002214:	4b30      	ldr	r3, [pc, #192]	@ (80022d8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	099b      	lsrs	r3, r3, #6
 800221a:	4a30      	ldr	r2, [pc, #192]	@ (80022dc <HAL_ADC_ConfigChannel+0x7d0>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	099b      	lsrs	r3, r3, #6
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	4613      	mov	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	4413      	add	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800222e:	e002      	b.n	8002236 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3b01      	subs	r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f9      	bne.n	8002230 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800223c:	e03a      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a27      	ldr	r2, [pc, #156]	@ (80022e0 <HAL_ADC_ConfigChannel+0x7d4>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d113      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800224c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a22      	ldr	r2, [pc, #136]	@ (80022e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02a      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800225e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002262:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002266:	4619      	mov	r1, r3
 8002268:	4818      	ldr	r0, [pc, #96]	@ (80022cc <HAL_ADC_ConfigChannel+0x7c0>)
 800226a:	f7fe fd0c 	bl	8000c86 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800226e:	e021      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a1c      	ldr	r2, [pc, #112]	@ (80022e8 <HAL_ADC_ConfigChannel+0x7dc>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d11c      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800227a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800227e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d116      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a16      	ldr	r2, [pc, #88]	@ (80022e4 <HAL_ADC_ConfigChannel+0x7d8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d011      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002294:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002298:	4619      	mov	r1, r3
 800229a:	480c      	ldr	r0, [pc, #48]	@ (80022cc <HAL_ADC_ConfigChannel+0x7c0>)
 800229c:	f7fe fcf3 	bl	8000c86 <LL_ADC_SetCommonPathInternalCh>
 80022a0:	e008      	b.n	80022b4 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	f043 0220 	orr.w	r2, r3, #32
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80022bc:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	37d8      	adds	r7, #216	@ 0xd8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	80080000 	.word	0x80080000
 80022cc:	50000300 	.word	0x50000300
 80022d0:	c3210000 	.word	0xc3210000
 80022d4:	90c00010 	.word	0x90c00010
 80022d8:	20000000 	.word	0x20000000
 80022dc:	053e2d63 	.word	0x053e2d63
 80022e0:	c7520000 	.word	0xc7520000
 80022e4:	50000100 	.word	0x50000100
 80022e8:	cb840000 	.word	0xcb840000

080022ec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80022f4:	2300      	movs	r3, #0
 80022f6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe feb5 	bl	800106c <LL_ADC_IsEnabled>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d169      	bne.n	80023dc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689a      	ldr	r2, [r3, #8]
 800230e:	4b36      	ldr	r3, [pc, #216]	@ (80023e8 <ADC_Enable+0xfc>)
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00d      	beq.n	8002332 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231a:	f043 0210 	orr.w	r2, r3, #16
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002326:	f043 0201 	orr.w	r2, r3, #1
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e055      	b.n	80023de <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fe70 	bl	800101c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800233c:	482b      	ldr	r0, [pc, #172]	@ (80023ec <ADC_Enable+0x100>)
 800233e:	f7fe fcb5 	bl	8000cac <LL_ADC_GetCommonPathInternalCh>
 8002342:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002344:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002348:	2b00      	cmp	r3, #0
 800234a:	d013      	beq.n	8002374 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800234c:	4b28      	ldr	r3, [pc, #160]	@ (80023f0 <ADC_Enable+0x104>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	4a28      	ldr	r2, [pc, #160]	@ (80023f4 <ADC_Enable+0x108>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	099b      	lsrs	r3, r3, #6
 800235a:	1c5a      	adds	r2, r3, #1
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002366:	e002      	b.n	800236e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	3b01      	subs	r3, #1
 800236c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f9      	bne.n	8002368 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002374:	f7fe fc68 	bl	8000c48 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800237a:	e028      	b.n	80023ce <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe fe73 	bl	800106c <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d104      	bne.n	8002396 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe fe43 	bl	800101c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002396:	f7fe fc57 	bl	8000c48 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d914      	bls.n	80023ce <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d00d      	beq.n	80023ce <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b6:	f043 0210 	orr.w	r2, r3, #16
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023c2:	f043 0201 	orr.w	r2, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e007      	b.n	80023de <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d1cf      	bne.n	800237c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	8000003f 	.word	0x8000003f
 80023ec:	50000300 	.word	0x50000300
 80023f0:	20000000 	.word	0x20000000
 80023f4:	053e2d63 	.word	0x053e2d63

080023f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fe44 	bl	8001092 <LL_ADC_IsDisableOngoing>
 800240a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe fe2b 	bl	800106c <LL_ADC_IsEnabled>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d047      	beq.n	80024ac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d144      	bne.n	80024ac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030d 	and.w	r3, r3, #13
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10c      	bne.n	800244a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fe05 	bl	8001044 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2203      	movs	r2, #3
 8002440:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002442:	f7fe fc01 	bl	8000c48 <HAL_GetTick>
 8002446:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002448:	e029      	b.n	800249e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800244e:	f043 0210 	orr.w	r2, r3, #16
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245a:	f043 0201 	orr.w	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e023      	b.n	80024ae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002466:	f7fe fbef 	bl	8000c48 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d914      	bls.n	800249e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00d      	beq.n	800249e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e007      	b.n	80024ae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1dc      	bne.n	8002466 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <LL_ADC_IsEnabled>:
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d101      	bne.n	80024ce <LL_ADC_IsEnabled+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_IsEnabled+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <LL_ADC_StartCalibration>:
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
 80024e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80024ee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	609a      	str	r2, [r3, #8]
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr

0800250e <LL_ADC_IsCalibrationOnGoing>:
{
 800250e:	b480      	push	{r7}
 8002510:	b083      	sub	sp, #12
 8002512:	af00      	add	r7, sp, #0
 8002514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800251e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002522:	d101      	bne.n	8002528 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_ADC_REG_IsConversionOngoing>:
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 0304 	and.w	r3, r3, #4
 8002546:	2b04      	cmp	r3, #4
 8002548:	d101      	bne.n	800254e <LL_ADC_REG_IsConversionOngoing+0x18>
 800254a:	2301      	movs	r3, #1
 800254c:	e000      	b.n	8002550 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	370c      	adds	r7, #12
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_ADCEx_Calibration_Start+0x1c>
 8002574:	2302      	movs	r3, #2
 8002576:	e04d      	b.n	8002614 <HAL_ADCEx_Calibration_Start+0xb8>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f7ff ff39 	bl	80023f8 <ADC_Disable>
 8002586:	4603      	mov	r3, r0
 8002588:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d136      	bne.n	80025fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002598:	f023 0302 	bic.w	r3, r3, #2
 800259c:	f043 0202 	orr.w	r2, r3, #2
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff ff96 	bl	80024dc <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025b0:	e014      	b.n	80025dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	3301      	adds	r3, #1
 80025b6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4a18      	ldr	r2, [pc, #96]	@ (800261c <HAL_ADCEx_Calibration_Start+0xc0>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d90d      	bls.n	80025dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	f023 0312 	bic.w	r3, r3, #18
 80025c8:	f043 0210 	orr.w	r2, r3, #16
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e01b      	b.n	8002614 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff94 	bl	800250e <LL_ADC_IsCalibrationOnGoing>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e2      	bne.n	80025b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	f023 0303 	bic.w	r3, r3, #3
 80025f4:	f043 0201 	orr.w	r2, r3, #1
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025fc:	e005      	b.n	800260a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002602:	f043 0210 	orr.w	r2, r3, #16
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	0004de01 	.word	0x0004de01

08002620 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b0a1      	sub	sp, #132	@ 0x84
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800269a:	2b01      	cmp	r3, #1
 800269c:	d101      	bne.n	80026a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800269e:	2302      	movs	r3, #2
 80026a0:	e08b      	b.n	80027ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026aa:	2300      	movs	r3, #0
 80026ac:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026ae:	2300      	movs	r3, #0
 80026b0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ba:	d102      	bne.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026bc:	4b41      	ldr	r3, [pc, #260]	@ (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80026be:	60bb      	str	r3, [r7, #8]
 80026c0:	e001      	b.n	80026c6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80026c2:	2300      	movs	r3, #0
 80026c4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d0:	f043 0220 	orr.w	r2, r3, #32
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e06a      	b.n	80027ba <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff ff25 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80026ec:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff ff1f 	bl	8002536 <LL_ADC_REG_IsConversionOngoing>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d14c      	bne.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80026fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002700:	2b00      	cmp	r3, #0
 8002702:	d149      	bne.n	8002798 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002704:	4b30      	ldr	r3, [pc, #192]	@ (80027c8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002706:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d028      	beq.n	8002762 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002710:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002722:	035b      	lsls	r3, r3, #13
 8002724:	430b      	orrs	r3, r1
 8002726:	431a      	orrs	r2, r3
 8002728:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800272a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800272c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002730:	f7ff fec1 	bl	80024b6 <LL_ADC_IsEnabled>
 8002734:	4604      	mov	r4, r0
 8002736:	4823      	ldr	r0, [pc, #140]	@ (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002738:	f7ff febd 	bl	80024b6 <LL_ADC_IsEnabled>
 800273c:	4603      	mov	r3, r0
 800273e:	4323      	orrs	r3, r4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d133      	bne.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002744:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800274c:	f023 030f 	bic.w	r3, r3, #15
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	6811      	ldr	r1, [r2, #0]
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	6892      	ldr	r2, [r2, #8]
 8002758:	430a      	orrs	r2, r1
 800275a:	431a      	orrs	r2, r3
 800275c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800275e:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002760:	e024      	b.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800276a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800276c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800276e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002772:	f7ff fea0 	bl	80024b6 <LL_ADC_IsEnabled>
 8002776:	4604      	mov	r4, r0
 8002778:	4812      	ldr	r0, [pc, #72]	@ (80027c4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800277a:	f7ff fe9c 	bl	80024b6 <LL_ADC_IsEnabled>
 800277e:	4603      	mov	r3, r0
 8002780:	4323      	orrs	r3, r4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d112      	bne.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002786:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800278e:	f023 030f 	bic.w	r3, r3, #15
 8002792:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002794:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002796:	e009      	b.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80027aa:	e000      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80027b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3784      	adds	r7, #132	@ 0x84
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}
 80027c2:	bf00      	nop
 80027c4:	50000100 	.word	0x50000100
 80027c8:	50000300 	.word	0x50000300

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	@ (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4907      	ldr	r1, [pc, #28]	@ (8002868 <__NVIC_EnableIRQ+0x38>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	e000e100 	.word	0xe000e100

0800286c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	4603      	mov	r3, r0
 8002874:	6039      	str	r1, [r7, #0]
 8002876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287c:	2b00      	cmp	r3, #0
 800287e:	db0a      	blt.n	8002896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	b2da      	uxtb	r2, r3
 8002884:	490c      	ldr	r1, [pc, #48]	@ (80028b8 <__NVIC_SetPriority+0x4c>)
 8002886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288a:	0112      	lsls	r2, r2, #4
 800288c:	b2d2      	uxtb	r2, r2
 800288e:	440b      	add	r3, r1
 8002890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002894:	e00a      	b.n	80028ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	b2da      	uxtb	r2, r3
 800289a:	4908      	ldr	r1, [pc, #32]	@ (80028bc <__NVIC_SetPriority+0x50>)
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	3b04      	subs	r3, #4
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	440b      	add	r3, r1
 80028aa:	761a      	strb	r2, [r3, #24]
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000e100 	.word	0xe000e100
 80028bc:	e000ed00 	.word	0xe000ed00

080028c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b089      	sub	sp, #36	@ 0x24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	f1c3 0307 	rsb	r3, r3, #7
 80028da:	2b04      	cmp	r3, #4
 80028dc:	bf28      	it	cs
 80028de:	2304      	movcs	r3, #4
 80028e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3304      	adds	r3, #4
 80028e6:	2b06      	cmp	r3, #6
 80028e8:	d902      	bls.n	80028f0 <NVIC_EncodePriority+0x30>
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3b03      	subs	r3, #3
 80028ee:	e000      	b.n	80028f2 <NVIC_EncodePriority+0x32>
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f4:	f04f 32ff 	mov.w	r2, #4294967295
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43da      	mvns	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	401a      	ands	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002908:	f04f 31ff 	mov.w	r1, #4294967295
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	fa01 f303 	lsl.w	r3, r1, r3
 8002912:	43d9      	mvns	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	4313      	orrs	r3, r2
         );
}
 800291a:	4618      	mov	r0, r3
 800291c:	3724      	adds	r7, #36	@ 0x24
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3b01      	subs	r3, #1
 8002934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002938:	d301      	bcc.n	800293e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800293a:	2301      	movs	r3, #1
 800293c:	e00f      	b.n	800295e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <SysTick_Config+0x40>)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3b01      	subs	r3, #1
 8002944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002946:	210f      	movs	r1, #15
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f7ff ff8e 	bl	800286c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002950:	4b05      	ldr	r3, [pc, #20]	@ (8002968 <SysTick_Config+0x40>)
 8002952:	2200      	movs	r2, #0
 8002954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002956:	4b04      	ldr	r3, [pc, #16]	@ (8002968 <SysTick_Config+0x40>)
 8002958:	2207      	movs	r2, #7
 800295a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	e000e010 	.word	0xe000e010

0800296c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff29 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b086      	sub	sp, #24
 8002986:	af00      	add	r7, sp, #0
 8002988:	4603      	mov	r3, r0
 800298a:	60b9      	str	r1, [r7, #8]
 800298c:	607a      	str	r2, [r7, #4]
 800298e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002990:	f7ff ff40 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002994:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68b9      	ldr	r1, [r7, #8]
 800299a:	6978      	ldr	r0, [r7, #20]
 800299c:	f7ff ff90 	bl	80028c0 <NVIC_EncodePriority>
 80029a0:	4602      	mov	r2, r0
 80029a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff5f 	bl	800286c <__NVIC_SetPriority>
}
 80029ae:	bf00      	nop
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	4603      	mov	r3, r0
 80029be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff ff33 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029ca:	bf00      	nop
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffa4 	bl	8002928 <SysTick_Config>
 80029e0:	4603      	mov	r3, r0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d005      	beq.n	8002a0e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2204      	movs	r2, #4
 8002a06:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e037      	b.n	8002a7e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 020e 	bic.w	r2, r2, #14
 8002a1c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a2c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0201 	bic.w	r2, r2, #1
 8002a3c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a5a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a72:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a7c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2201      	movs	r2, #1
 8002abe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	73fb      	strb	r3, [r7, #15]
 8002ace:	e047      	b.n	8002b60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 020e 	bic.w	r2, r2, #14
 8002ade:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0201 	bic.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002b1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00c      	beq.n	8002b40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002b34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002b3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
    }
  }
  return status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b087      	sub	sp, #28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002b7a:	e15a      	b.n	8002e32 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2101      	movs	r1, #1
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	fa01 f303 	lsl.w	r3, r1, r3
 8002b88:	4013      	ands	r3, r2
 8002b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f000 814c 	beq.w	8002e2c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d005      	beq.n	8002bac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d130      	bne.n	8002c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	68da      	ldr	r2, [r3, #12]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002be2:	2201      	movs	r2, #1
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	091b      	lsrs	r3, r3, #4
 8002bf8:	f003 0201 	and.w	r2, r3, #1
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 0303 	and.w	r3, r3, #3
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d017      	beq.n	8002c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	2203      	movs	r2, #3
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0303 	and.w	r3, r3, #3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d123      	bne.n	8002c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	08da      	lsrs	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3208      	adds	r2, #8
 8002c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	220f      	movs	r2, #15
 8002c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691a      	ldr	r2, [r3, #16]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	08da      	lsrs	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	3208      	adds	r2, #8
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	2203      	movs	r2, #3
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f003 0203 	and.w	r2, r3, #3
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	693a      	ldr	r2, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	f000 80a6 	beq.w	8002e2c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8002e50 <HAL_GPIO_Init+0x2e4>)
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce4:	4a5a      	ldr	r2, [pc, #360]	@ (8002e50 <HAL_GPIO_Init+0x2e4>)
 8002ce6:	f043 0301 	orr.w	r3, r3, #1
 8002cea:	6613      	str	r3, [r2, #96]	@ 0x60
 8002cec:	4b58      	ldr	r3, [pc, #352]	@ (8002e50 <HAL_GPIO_Init+0x2e4>)
 8002cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cf8:	4a56      	ldr	r2, [pc, #344]	@ (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	089b      	lsrs	r3, r3, #2
 8002cfe:	3302      	adds	r3, #2
 8002d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0303 	and.w	r3, r3, #3
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	220f      	movs	r2, #15
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d22:	d01f      	beq.n	8002d64 <HAL_GPIO_Init+0x1f8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a4c      	ldr	r2, [pc, #304]	@ (8002e58 <HAL_GPIO_Init+0x2ec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d019      	beq.n	8002d60 <HAL_GPIO_Init+0x1f4>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a4b      	ldr	r2, [pc, #300]	@ (8002e5c <HAL_GPIO_Init+0x2f0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d013      	beq.n	8002d5c <HAL_GPIO_Init+0x1f0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a4a      	ldr	r2, [pc, #296]	@ (8002e60 <HAL_GPIO_Init+0x2f4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00d      	beq.n	8002d58 <HAL_GPIO_Init+0x1ec>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a49      	ldr	r2, [pc, #292]	@ (8002e64 <HAL_GPIO_Init+0x2f8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d007      	beq.n	8002d54 <HAL_GPIO_Init+0x1e8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a48      	ldr	r2, [pc, #288]	@ (8002e68 <HAL_GPIO_Init+0x2fc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d101      	bne.n	8002d50 <HAL_GPIO_Init+0x1e4>
 8002d4c:	2305      	movs	r3, #5
 8002d4e:	e00a      	b.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d50:	2306      	movs	r3, #6
 8002d52:	e008      	b.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d54:	2304      	movs	r3, #4
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1fa>
 8002d64:	2300      	movs	r3, #0
 8002d66:	697a      	ldr	r2, [r7, #20]
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d76:	4937      	ldr	r1, [pc, #220]	@ (8002e54 <HAL_GPIO_Init+0x2e8>)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	693a      	ldr	r2, [r7, #16]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d84:	4b39      	ldr	r3, [pc, #228]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4013      	ands	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002da8:	4a30      	ldr	r2, [pc, #192]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002dae:	4b2f      	ldr	r3, [pc, #188]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002dd2:	4a26      	ldr	r2, [pc, #152]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002dd8:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	4013      	ands	r3, r2
 8002de6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e02:	4b1a      	ldr	r3, [pc, #104]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43db      	mvns	r3, r3
 8002e0c:	693a      	ldr	r2, [r7, #16]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e26:	4a11      	ldr	r2, [pc, #68]	@ (8002e6c <HAL_GPIO_Init+0x300>)
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f ae9d 	bne.w	8002b7c <HAL_GPIO_Init+0x10>
  }
}
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40021000 	.word	0x40021000
 8002e54:	40010000 	.word	0x40010000
 8002e58:	48000400 	.word	0x48000400
 8002e5c:	48000800 	.word	0x48000800
 8002e60:	48000c00 	.word	0x48000c00
 8002e64:	48001000 	.word	0x48001000
 8002e68:	48001400 	.word	0x48001400
 8002e6c:	40010400 	.word	0x40010400

08002e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d141      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e8a:	d131      	bne.n	8002ef0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e8c:	4b47      	ldr	r3, [pc, #284]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e92:	4a46      	ldr	r2, [pc, #280]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e9c:	4b43      	ldr	r3, [pc, #268]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ea4:	4a41      	ldr	r2, [pc, #260]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eac:	4b40      	ldr	r3, [pc, #256]	@ (8002fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2232      	movs	r2, #50	@ 0x32
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebc:	0c9b      	lsrs	r3, r3, #18
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ec2:	e002      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eca:	4b38      	ldr	r3, [pc, #224]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed6:	d102      	bne.n	8002ede <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1f2      	bne.n	8002ec4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ede:	4b33      	ldr	r3, [pc, #204]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eea:	d158      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e057      	b.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ef6:	4a2d      	ldr	r2, [pc, #180]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002efc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f00:	e04d      	b.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f08:	d141      	bne.n	8002f8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f0a:	4b28      	ldr	r3, [pc, #160]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f16:	d131      	bne.n	8002f7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f18:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f1e:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f28:	4b20      	ldr	r3, [pc, #128]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f30:	4a1e      	ldr	r2, [pc, #120]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f38:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2232      	movs	r2, #50	@ 0x32
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f44:	fba2 2303 	umull	r2, r3, r2, r3
 8002f48:	0c9b      	lsrs	r3, r3, #18
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f4e:	e002      	b.n	8002f56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f56:	4b15      	ldr	r3, [pc, #84]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f62:	d102      	bne.n	8002f6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f2      	bne.n	8002f50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f76:	d112      	bne.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e011      	b.n	8002fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f82:	4a0a      	ldr	r2, [pc, #40]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f8c:	e007      	b.n	8002f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f8e:	4b07      	ldr	r3, [pc, #28]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f96:	4a05      	ldr	r2, [pc, #20]	@ (8002fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	431bde83 	.word	0x431bde83

08002fb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fc6:	6093      	str	r3, [r2, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40007000 	.word	0x40007000

08002fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e2fe      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d075      	beq.n	80030e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff6:	4b97      	ldr	r3, [pc, #604]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003000:	4b94      	ldr	r3, [pc, #592]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d102      	bne.n	8003016 <HAL_RCC_OscConfig+0x3e>
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d002      	beq.n	800301c <HAL_RCC_OscConfig+0x44>
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d10b      	bne.n	8003034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301c:	4b8d      	ldr	r3, [pc, #564]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d05b      	beq.n	80030e0 <HAL_RCC_OscConfig+0x108>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d157      	bne.n	80030e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e2d9      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800303c:	d106      	bne.n	800304c <HAL_RCC_OscConfig+0x74>
 800303e:	4b85      	ldr	r3, [pc, #532]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a84      	ldr	r2, [pc, #528]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	e01d      	b.n	8003088 <HAL_RCC_OscConfig+0xb0>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003054:	d10c      	bne.n	8003070 <HAL_RCC_OscConfig+0x98>
 8003056:	4b7f      	ldr	r3, [pc, #508]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7e      	ldr	r2, [pc, #504]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800305c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	4b7c      	ldr	r3, [pc, #496]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a7b      	ldr	r2, [pc, #492]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e00b      	b.n	8003088 <HAL_RCC_OscConfig+0xb0>
 8003070:	4b78      	ldr	r3, [pc, #480]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a77      	ldr	r2, [pc, #476]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003076:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800307a:	6013      	str	r3, [r2, #0]
 800307c:	4b75      	ldr	r3, [pc, #468]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a74      	ldr	r2, [pc, #464]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003082:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d013      	beq.n	80030b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003090:	f7fd fdda 	bl	8000c48 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003098:	f7fd fdd6 	bl	8000c48 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b64      	cmp	r3, #100	@ 0x64
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e29e      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0f0      	beq.n	8003098 <HAL_RCC_OscConfig+0xc0>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b8:	f7fd fdc6 	bl	8000c48 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030c0:	f7fd fdc2 	bl	8000c48 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b64      	cmp	r3, #100	@ 0x64
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e28a      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80030d2:	4b60      	ldr	r3, [pc, #384]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f0      	bne.n	80030c0 <HAL_RCC_OscConfig+0xe8>
 80030de:	e000      	b.n	80030e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d075      	beq.n	80031da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ee:	4b59      	ldr	r3, [pc, #356]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 030c 	and.w	r3, r3, #12
 80030f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f8:	4b56      	ldr	r3, [pc, #344]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	2b0c      	cmp	r3, #12
 8003106:	d102      	bne.n	800310e <HAL_RCC_OscConfig+0x136>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d002      	beq.n	8003114 <HAL_RCC_OscConfig+0x13c>
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	2b04      	cmp	r3, #4
 8003112:	d11f      	bne.n	8003154 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003114:	4b4f      	ldr	r3, [pc, #316]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x154>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e25d      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800312c:	4b49      	ldr	r3, [pc, #292]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	691b      	ldr	r3, [r3, #16]
 8003138:	061b      	lsls	r3, r3, #24
 800313a:	4946      	ldr	r1, [pc, #280]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003140:	4b45      	ldr	r3, [pc, #276]	@ (8003258 <HAL_RCC_OscConfig+0x280>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4618      	mov	r0, r3
 8003146:	f7fd fd33 	bl	8000bb0 <HAL_InitTick>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d043      	beq.n	80031d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e249      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d023      	beq.n	80031a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800315c:	4b3d      	ldr	r3, [pc, #244]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a3c      	ldr	r2, [pc, #240]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd fd6e 	bl	8000c48 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003170:	f7fd fd6a 	bl	8000c48 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e232      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003182:	4b34      	ldr	r3, [pc, #208]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	4b31      	ldr	r3, [pc, #196]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	061b      	lsls	r3, r3, #24
 800319c:	492d      	ldr	r1, [pc, #180]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	604b      	str	r3, [r1, #4]
 80031a2:	e01a      	b.n	80031da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b0:	f7fd fd4a 	bl	8000c48 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b8:	f7fd fd46 	bl	8000c48 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e20e      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031ca:	4b22      	ldr	r3, [pc, #136]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x1e0>
 80031d6:	e000      	b.n	80031da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d041      	beq.n	800326a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d01c      	beq.n	8003228 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031ee:	4b19      	ldr	r3, [pc, #100]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80031f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031f4:	4a17      	ldr	r2, [pc, #92]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fe:	f7fd fd23 	bl	8000c48 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003206:	f7fd fd1f 	bl	8000c48 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e1e7      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003218:	4b0e      	ldr	r3, [pc, #56]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d0ef      	beq.n	8003206 <HAL_RCC_OscConfig+0x22e>
 8003226:	e020      	b.n	800326a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003228:	4b0a      	ldr	r3, [pc, #40]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 800322a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800322e:	4a09      	ldr	r2, [pc, #36]	@ (8003254 <HAL_RCC_OscConfig+0x27c>)
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fd fd06 	bl	8000c48 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800323e:	e00d      	b.n	800325c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003240:	f7fd fd02 	bl	8000c48 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d906      	bls.n	800325c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1ca      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
 8003252:	bf00      	nop
 8003254:	40021000 	.word	0x40021000
 8003258:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800325c:	4b8c      	ldr	r3, [pc, #560]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d1ea      	bne.n	8003240 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 80a6 	beq.w	80033c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003278:	2300      	movs	r3, #0
 800327a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800327c:	4b84      	ldr	r3, [pc, #528]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003280:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_OscConfig+0x2b4>
 8003288:	2301      	movs	r3, #1
 800328a:	e000      	b.n	800328e <HAL_RCC_OscConfig+0x2b6>
 800328c:	2300      	movs	r3, #0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00d      	beq.n	80032ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003292:	4b7f      	ldr	r3, [pc, #508]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003294:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003296:	4a7e      	ldr	r2, [pc, #504]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800329c:	6593      	str	r3, [r2, #88]	@ 0x58
 800329e:	4b7c      	ldr	r3, [pc, #496]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80032a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	60fb      	str	r3, [r7, #12]
 80032a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80032aa:	2301      	movs	r3, #1
 80032ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032ae:	4b79      	ldr	r3, [pc, #484]	@ (8003494 <HAL_RCC_OscConfig+0x4bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d118      	bne.n	80032ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032ba:	4b76      	ldr	r3, [pc, #472]	@ (8003494 <HAL_RCC_OscConfig+0x4bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a75      	ldr	r2, [pc, #468]	@ (8003494 <HAL_RCC_OscConfig+0x4bc>)
 80032c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032c6:	f7fd fcbf 	bl	8000c48 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ce:	f7fd fcbb 	bl	8000c48 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e183      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003494 <HAL_RCC_OscConfig+0x4bc>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d108      	bne.n	8003306 <HAL_RCC_OscConfig+0x32e>
 80032f4:	4b66      	ldr	r3, [pc, #408]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	4a65      	ldr	r2, [pc, #404]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003304:	e024      	b.n	8003350 <HAL_RCC_OscConfig+0x378>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	2b05      	cmp	r3, #5
 800330c:	d110      	bne.n	8003330 <HAL_RCC_OscConfig+0x358>
 800330e:	4b60      	ldr	r3, [pc, #384]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003310:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003314:	4a5e      	ldr	r2, [pc, #376]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	f043 0304 	orr.w	r3, r3, #4
 800331a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800331e:	4b5c      	ldr	r3, [pc, #368]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003324:	4a5a      	ldr	r2, [pc, #360]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800332e:	e00f      	b.n	8003350 <HAL_RCC_OscConfig+0x378>
 8003330:	4b57      	ldr	r3, [pc, #348]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003336:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	f023 0301 	bic.w	r3, r3, #1
 800333c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003340:	4b53      	ldr	r3, [pc, #332]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	4a52      	ldr	r2, [pc, #328]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d016      	beq.n	8003386 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003358:	f7fd fc76 	bl	8000c48 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335e:	e00a      	b.n	8003376 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003360:	f7fd fc72 	bl	8000c48 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800336e:	4293      	cmp	r3, r2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e138      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003376:	4b46      	ldr	r3, [pc, #280]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ed      	beq.n	8003360 <HAL_RCC_OscConfig+0x388>
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fd fc5f 	bl	8000c48 <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800338c:	e00a      	b.n	80033a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800338e:	f7fd fc5b 	bl	8000c48 <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800339c:	4293      	cmp	r3, r2
 800339e:	d901      	bls.n	80033a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	e121      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1ed      	bne.n	800338e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033b2:	7ffb      	ldrb	r3, [r7, #31]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d105      	bne.n	80033c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b8:	4b35      	ldr	r3, [pc, #212]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	4a34      	ldr	r2, [pc, #208]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80033be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0320 	and.w	r3, r3, #32
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d03c      	beq.n	800344a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01c      	beq.n	8003412 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80033d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80033da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033de:	4a2c      	ldr	r2, [pc, #176]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fd fc2e 	bl	8000c48 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033f0:	f7fd fc2a 	bl	8000c48 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b02      	cmp	r3, #2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e0f2      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003402:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003404:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ef      	beq.n	80033f0 <HAL_RCC_OscConfig+0x418>
 8003410:	e01b      	b.n	800344a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003412:	4b1f      	ldr	r3, [pc, #124]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003414:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003418:	4a1d      	ldr	r2, [pc, #116]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fd fc11 	bl	8000c48 <HAL_GetTick>
 8003426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003428:	e008      	b.n	800343c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800342a:	f7fd fc0d 	bl	8000c48 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e0d5      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800343c:	4b14      	ldr	r3, [pc, #80]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 800343e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1ef      	bne.n	800342a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69db      	ldr	r3, [r3, #28]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 80c9 	beq.w	80035e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003454:	4b0e      	ldr	r3, [pc, #56]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f003 030c 	and.w	r3, r3, #12
 800345c:	2b0c      	cmp	r3, #12
 800345e:	f000 8083 	beq.w	8003568 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d15e      	bne.n	8003528 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a08      	ldr	r2, [pc, #32]	@ (8003490 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fd fbe7 	bl	8000c48 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347c:	e00c      	b.n	8003498 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd fbe3 	bl	8000c48 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d905      	bls.n	8003498 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0ab      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
 8003490:	40021000 	.word	0x40021000
 8003494:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003498:	4b55      	ldr	r3, [pc, #340]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ec      	bne.n	800347e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a4:	4b52      	ldr	r3, [pc, #328]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 80034a6:	68da      	ldr	r2, [r3, #12]
 80034a8:	4b52      	ldr	r3, [pc, #328]	@ (80035f4 <HAL_RCC_OscConfig+0x61c>)
 80034aa:	4013      	ands	r3, r2
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6a11      	ldr	r1, [r2, #32]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034b4:	3a01      	subs	r2, #1
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	4311      	orrs	r1, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80034be:	0212      	lsls	r2, r2, #8
 80034c0:	4311      	orrs	r1, r2
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80034c6:	0852      	lsrs	r2, r2, #1
 80034c8:	3a01      	subs	r2, #1
 80034ca:	0552      	lsls	r2, r2, #21
 80034cc:	4311      	orrs	r1, r2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80034d2:	0852      	lsrs	r2, r2, #1
 80034d4:	3a01      	subs	r2, #1
 80034d6:	0652      	lsls	r2, r2, #25
 80034d8:	4311      	orrs	r1, r2
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034de:	06d2      	lsls	r2, r2, #27
 80034e0:	430a      	orrs	r2, r1
 80034e2:	4943      	ldr	r1, [pc, #268]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b41      	ldr	r3, [pc, #260]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a40      	ldr	r2, [pc, #256]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 80034ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034f4:	4b3e      	ldr	r3, [pc, #248]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a3d      	ldr	r2, [pc, #244]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 80034fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003500:	f7fd fba2 	bl	8000c48 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003508:	f7fd fb9e 	bl	8000c48 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e066      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800351a:	4b35      	ldr	r3, [pc, #212]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x530>
 8003526:	e05e      	b.n	80035e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003528:	4b31      	ldr	r3, [pc, #196]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a30      	ldr	r2, [pc, #192]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 800352e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fd fb88 	bl	8000c48 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800353c:	f7fd fb84 	bl	8000c48 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e04c      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800354e:	4b28      	ldr	r3, [pc, #160]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800355a:	4b25      	ldr	r3, [pc, #148]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	4924      	ldr	r1, [pc, #144]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 8003560:	4b25      	ldr	r3, [pc, #148]	@ (80035f8 <HAL_RCC_OscConfig+0x620>)
 8003562:	4013      	ands	r3, r2
 8003564:	60cb      	str	r3, [r1, #12]
 8003566:	e03e      	b.n	80035e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e039      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003574:	4b1e      	ldr	r3, [pc, #120]	@ (80035f0 <HAL_RCC_OscConfig+0x618>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	429a      	cmp	r2, r3
 8003586:	d12c      	bne.n	80035e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	3b01      	subs	r3, #1
 8003594:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d123      	bne.n	80035e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d11b      	bne.n	80035e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d113      	bne.n	80035e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	3b01      	subs	r3, #1
 80035c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d109      	bne.n	80035e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d8:	085b      	lsrs	r3, r3, #1
 80035da:	3b01      	subs	r3, #1
 80035dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035de:	429a      	cmp	r2, r3
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40021000 	.word	0x40021000
 80035f4:	019f800c 	.word	0x019f800c
 80035f8:	feeefffc 	.word	0xfeeefffc

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b086      	sub	sp, #24
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003606:	2300      	movs	r3, #0
 8003608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e11e      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003614:	4b91      	ldr	r3, [pc, #580]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d910      	bls.n	8003644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b8e      	ldr	r3, [pc, #568]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 020f 	bic.w	r2, r3, #15
 800362a:	498c      	ldr	r1, [pc, #560]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b8a      	ldr	r3, [pc, #552]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d001      	beq.n	8003644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e106      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d073      	beq.n	8003738 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b03      	cmp	r3, #3
 8003656:	d129      	bne.n	80036ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003658:	4b81      	ldr	r3, [pc, #516]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	e0f4      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003668:	f000 f99e 	bl	80039a8 <RCC_GetSysClockFreqFromPLLSource>
 800366c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4a7c      	ldr	r2, [pc, #496]	@ (8003864 <HAL_RCC_ClockConfig+0x268>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d93f      	bls.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003676:	4b7a      	ldr	r3, [pc, #488]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d009      	beq.n	8003696 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800368a:	2b00      	cmp	r3, #0
 800368c:	d033      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003692:	2b00      	cmp	r3, #0
 8003694:	d12f      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003696:	4b72      	ldr	r3, [pc, #456]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800369e:	4a70      	ldr	r2, [pc, #448]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80036a6:	2380      	movs	r3, #128	@ 0x80
 80036a8:	617b      	str	r3, [r7, #20]
 80036aa:	e024      	b.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d109      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0c6      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036c4:	4b66      	ldr	r3, [pc, #408]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d101      	bne.n	80036d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0be      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80036d4:	f000 f8ce 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4a61      	ldr	r2, [pc, #388]	@ (8003864 <HAL_RCC_ClockConfig+0x268>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d909      	bls.n	80036f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80036ea:	4a5d      	ldr	r2, [pc, #372]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036f6:	4b5a      	ldr	r3, [pc, #360]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f023 0203 	bic.w	r2, r3, #3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4957      	ldr	r1, [pc, #348]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003704:	4313      	orrs	r3, r2
 8003706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003708:	f7fd fa9e 	bl	8000c48 <HAL_GetTick>
 800370c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370e:	e00a      	b.n	8003726 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003710:	f7fd fa9a 	bl	8000c48 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800371e:	4293      	cmp	r3, r2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e095      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003726:	4b4e      	ldr	r3, [pc, #312]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 020c 	and.w	r2, r3, #12
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	429a      	cmp	r2, r3
 8003736:	d1eb      	bne.n	8003710 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003750:	4b43      	ldr	r3, [pc, #268]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a42      	ldr	r2, [pc, #264]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003756:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800375a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0308 	and.w	r3, r3, #8
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003768:	4b3d      	ldr	r3, [pc, #244]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003770:	4a3b      	ldr	r2, [pc, #236]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4b39      	ldr	r3, [pc, #228]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	4936      	ldr	r1, [pc, #216]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003786:	4313      	orrs	r3, r2
 8003788:	608b      	str	r3, [r1, #8]
 800378a:	e008      	b.n	800379e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2b80      	cmp	r3, #128	@ 0x80
 8003790:	d105      	bne.n	800379e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003792:	4b33      	ldr	r3, [pc, #204]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	4a32      	ldr	r2, [pc, #200]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003798:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800379c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800379e:	4b2f      	ldr	r3, [pc, #188]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d21d      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ac:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f023 020f 	bic.w	r2, r3, #15
 80037b4:	4929      	ldr	r1, [pc, #164]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037bc:	f7fd fa44 	bl	8000c48 <HAL_GetTick>
 80037c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fd fa40 	bl	8000c48 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e03b      	b.n	8003852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_ClockConfig+0x260>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d1ed      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4917      	ldr	r1, [pc, #92]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490f      	ldr	r1, [pc, #60]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003826:	f000 f825 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 800382a:	4602      	mov	r2, r0
 800382c:	4b0c      	ldr	r3, [pc, #48]	@ (8003860 <HAL_RCC_ClockConfig+0x264>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	490c      	ldr	r1, [pc, #48]	@ (8003868 <HAL_RCC_ClockConfig+0x26c>)
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	f003 031f 	and.w	r3, r3, #31
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <HAL_RCC_ClockConfig+0x270>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003846:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <HAL_RCC_ClockConfig+0x274>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd f9b0 	bl	8000bb0 <HAL_InitTick>
 8003850:	4603      	mov	r3, r0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40022000 	.word	0x40022000
 8003860:	40021000 	.word	0x40021000
 8003864:	04c4b400 	.word	0x04c4b400
 8003868:	0800527c 	.word	0x0800527c
 800386c:	20000000 	.word	0x20000000
 8003870:	20000004 	.word	0x20000004

08003874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800387a:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	f003 030c 	and.w	r3, r3, #12
 8003882:	2b04      	cmp	r3, #4
 8003884:	d102      	bne.n	800388c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003886:	4b2a      	ldr	r3, [pc, #168]	@ (8003930 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	e047      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800388c:	4b27      	ldr	r3, [pc, #156]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f003 030c 	and.w	r3, r3, #12
 8003894:	2b08      	cmp	r3, #8
 8003896:	d102      	bne.n	800389e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003898:	4b26      	ldr	r3, [pc, #152]	@ (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 800389a:	613b      	str	r3, [r7, #16]
 800389c:	e03e      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800389e:	4b23      	ldr	r3, [pc, #140]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d136      	bne.n	8003918 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038aa:	4b20      	ldr	r3, [pc, #128]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038b4:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	091b      	lsrs	r3, r3, #4
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	3301      	adds	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2b03      	cmp	r3, #3
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038c8:	4a1a      	ldr	r2, [pc, #104]	@ (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	4a16      	ldr	r2, [pc, #88]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038d2:	68d2      	ldr	r2, [r2, #12]
 80038d4:	0a12      	lsrs	r2, r2, #8
 80038d6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038da:	fb02 f303 	mul.w	r3, r2, r3
 80038de:	617b      	str	r3, [r7, #20]
      break;
 80038e0:	e00c      	b.n	80038fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038e2:	4a13      	ldr	r2, [pc, #76]	@ (8003930 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ea:	4a10      	ldr	r2, [pc, #64]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	0a12      	lsrs	r2, r2, #8
 80038f0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	617b      	str	r3, [r7, #20]
      break;
 80038fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_RCC_GetSysClockFreq+0xb8>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	0e5b      	lsrs	r3, r3, #25
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	3301      	adds	r3, #1
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	fbb2 f3f3 	udiv	r3, r2, r3
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	e001      	b.n	800391c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800391c:	693b      	ldr	r3, [r7, #16]
}
 800391e:	4618      	mov	r0, r3
 8003920:	371c      	adds	r7, #28
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000
 8003930:	00f42400 	.word	0x00f42400
 8003934:	007a1200 	.word	0x007a1200

08003938 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800393c:	4b03      	ldr	r3, [pc, #12]	@ (800394c <HAL_RCC_GetHCLKFreq+0x14>)
 800393e:	681b      	ldr	r3, [r3, #0]
}
 8003940:	4618      	mov	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	20000000 	.word	0x20000000

08003950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003954:	f7ff fff0 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003958:	4602      	mov	r2, r0
 800395a:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <HAL_RCC_GetPCLK1Freq+0x24>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	4904      	ldr	r1, [pc, #16]	@ (8003978 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003966:	5ccb      	ldrb	r3, [r1, r3]
 8003968:	f003 031f 	and.w	r3, r3, #31
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	0800528c 	.word	0x0800528c

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003980:	f7ff ffda 	bl	8003938 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4904      	ldr	r1, [pc, #16]	@ (80039a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	f003 031f 	and.w	r3, r3, #31
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800399c:	4618      	mov	r0, r3
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	40021000 	.word	0x40021000
 80039a4:	0800528c 	.word	0x0800528c

080039a8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	f003 0303 	and.w	r3, r3, #3
 80039b6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	091b      	lsrs	r3, r3, #4
 80039be:	f003 030f 	and.w	r3, r3, #15
 80039c2:	3301      	adds	r3, #1
 80039c4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b03      	cmp	r3, #3
 80039ca:	d10c      	bne.n	80039e6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039cc:	4a17      	ldr	r2, [pc, #92]	@ (8003a2c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d4:	4a14      	ldr	r2, [pc, #80]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d6:	68d2      	ldr	r2, [r2, #12]
 80039d8:	0a12      	lsrs	r2, r2, #8
 80039da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039de:	fb02 f303 	mul.w	r3, r2, r3
 80039e2:	617b      	str	r3, [r7, #20]
    break;
 80039e4:	e00c      	b.n	8003a00 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	0a12      	lsrs	r2, r2, #8
 80039f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80039f8:	fb02 f303 	mul.w	r3, r2, r3
 80039fc:	617b      	str	r3, [r7, #20]
    break;
 80039fe:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a00:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	0e5b      	lsrs	r3, r3, #25
 8003a06:	f003 0303 	and.w	r3, r3, #3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a1a:	687b      	ldr	r3, [r7, #4]
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	371c      	adds	r7, #28
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	007a1200 	.word	0x007a1200
 8003a30:	00f42400 	.word	0x00f42400

08003a34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a40:	2300      	movs	r3, #0
 8003a42:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8098 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a56:	4b43      	ldr	r3, [pc, #268]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10d      	bne.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a62:	4b40      	ldr	r3, [pc, #256]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a66:	4a3f      	ldr	r2, [pc, #252]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a39      	ldr	r2, [pc, #228]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003a84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a8a:	f7fd f8dd 	bl	8000c48 <HAL_GetTick>
 8003a8e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a90:	e009      	b.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a92:	f7fd f8d9 	bl	8000c48 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d902      	bls.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	74fb      	strb	r3, [r7, #19]
        break;
 8003aa4:	e005      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aa6:	4b30      	ldr	r3, [pc, #192]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0ef      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ab2:	7cfb      	ldrb	r3, [r7, #19]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d159      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01e      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d019      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ad4:	4b23      	ldr	r3, [pc, #140]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ada:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ade:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ae0:	4b20      	ldr	r3, [pc, #128]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003af0:	4b1c      	ldr	r3, [pc, #112]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003af6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b00:	4a18      	ldr	r2, [pc, #96]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d016      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b12:	f7fd f899 	bl	8000c48 <HAL_GetTick>
 8003b16:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b18:	e00b      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fd f895 	bl	8000c48 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d902      	bls.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	74fb      	strb	r3, [r7, #19]
            break;
 8003b30:	e006      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b32:	4b0c      	ldr	r3, [pc, #48]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0ec      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b40:	7cfb      	ldrb	r3, [r7, #19]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10b      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b54:	4903      	ldr	r1, [pc, #12]	@ (8003b64 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b5c:	e008      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b5e:	7cfb      	ldrb	r3, [r7, #19]
 8003b60:	74bb      	strb	r3, [r7, #18]
 8003b62:	e005      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	7cfb      	ldrb	r3, [r7, #19]
 8003b6e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b70:	7c7b      	ldrb	r3, [r7, #17]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b76:	4ba6      	ldr	r3, [pc, #664]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7a:	4aa5      	ldr	r2, [pc, #660]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b80:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b8e:	4ba0      	ldr	r3, [pc, #640]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b94:	f023 0203 	bic.w	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	499c      	ldr	r1, [pc, #624]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bb0:	4b97      	ldr	r3, [pc, #604]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bb6:	f023 020c 	bic.w	r2, r3, #12
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	4994      	ldr	r1, [pc, #592]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bd8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	498b      	ldr	r1, [pc, #556]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bf4:	4b86      	ldr	r3, [pc, #536]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bfa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	4983      	ldr	r1, [pc, #524]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c16:	4b7e      	ldr	r3, [pc, #504]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	497a      	ldr	r1, [pc, #488]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00a      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c38:	4b75      	ldr	r3, [pc, #468]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	4972      	ldr	r1, [pc, #456]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00a      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c60:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4969      	ldr	r1, [pc, #420]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c7c:	4b64      	ldr	r3, [pc, #400]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c82:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	4961      	ldr	r1, [pc, #388]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ca4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cac:	4958      	ldr	r1, [pc, #352]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d015      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cc0:	4b53      	ldr	r3, [pc, #332]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	4950      	ldr	r1, [pc, #320]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cde:	d105      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cea:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d015      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf8:	4b45      	ldr	r3, [pc, #276]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cfe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d06:	4942      	ldr	r1, [pc, #264]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d16:	d105      	bne.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d18:	4b3d      	ldr	r3, [pc, #244]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d22:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d015      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d30:	4b37      	ldr	r3, [pc, #220]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d36:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3e:	4934      	ldr	r1, [pc, #208]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d50:	4b2f      	ldr	r3, [pc, #188]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4a2e      	ldr	r2, [pc, #184]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d015      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d68:	4b29      	ldr	r3, [pc, #164]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d76:	4926      	ldr	r1, [pc, #152]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d86:	d105      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d88:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4a20      	ldr	r2, [pc, #128]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d015      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003da0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003da6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	4918      	ldr	r1, [pc, #96]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dbe:	d105      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dc0:	4b13      	ldr	r3, [pc, #76]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	4a12      	ldr	r2, [pc, #72]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d015      	beq.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dde:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de6:	490a      	ldr	r1, [pc, #40]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003df6:	d105      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a04      	ldr	r2, [pc, #16]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003e04:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3718      	adds	r7, #24
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40021000 	.word	0x40021000

08003e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e042      	b.n	8003eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d106      	bne.n	8003e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7fc fe17 	bl	8000a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2224      	movs	r2, #36	@ 0x24
 8003e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fe56 	bl	8004b10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 fb87 	bl	8004578 <UART_SetConfig>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e01b      	b.n	8003eac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 fed5 	bl	8004c54 <UART_CheckIdleState>
 8003eaa:	4603      	mov	r3, r0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3708      	adds	r7, #8
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003eda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ede:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d11b      	bne.n	8003f28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d015      	beq.n	8003f28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f00:	f003 0320 	and.w	r3, r3, #32
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d105      	bne.n	8003f14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d009      	beq.n	8003f28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 8300 	beq.w	800451e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
      }
      return;
 8003f26:	e2fa      	b.n	800451e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8123 	beq.w	8004178 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003f36:	4b8d      	ldr	r3, [pc, #564]	@ (800416c <HAL_UART_IRQHandler+0x2b8>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d106      	bne.n	8003f4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003f42:	4b8b      	ldr	r3, [pc, #556]	@ (8004170 <HAL_UART_IRQHandler+0x2bc>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8116 	beq.w	8004178 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f50:	f003 0301 	and.w	r3, r3, #1
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d011      	beq.n	8003f7c <HAL_UART_IRQHandler+0xc8>
 8003f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d00b      	beq.n	8003f7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f72:	f043 0201 	orr.w	r2, r3, #1
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d011      	beq.n	8003fac <HAL_UART_IRQHandler+0xf8>
 8003f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa2:	f043 0204 	orr.w	r2, r3, #4
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fb0:	f003 0304 	and.w	r3, r3, #4
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d011      	beq.n	8003fdc <HAL_UART_IRQHandler+0x128>
 8003fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d00b      	beq.n	8003fdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2204      	movs	r2, #4
 8003fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd2:	f043 0202 	orr.w	r2, r3, #2
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003ff4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003ff8:	4b5c      	ldr	r3, [pc, #368]	@ (800416c <HAL_UART_IRQHandler+0x2b8>)
 8003ffa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00b      	beq.n	8004018 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2208      	movs	r2, #8
 8004006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400e:	f043 0208 	orr.w	r2, r3, #8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004020:	2b00      	cmp	r3, #0
 8004022:	d012      	beq.n	800404a <HAL_UART_IRQHandler+0x196>
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00c      	beq.n	800404a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004040:	f043 0220 	orr.w	r2, r3, #32
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 8266 	beq.w	8004522 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800405a:	f003 0320 	and.w	r3, r3, #32
 800405e:	2b00      	cmp	r3, #0
 8004060:	d013      	beq.n	800408a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d105      	bne.n	800407a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800406e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004072:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d007      	beq.n	800408a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004090:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409e:	2b40      	cmp	r3, #64	@ 0x40
 80040a0:	d005      	beq.n	80040ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040a6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d054      	beq.n	8004158 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fee7 	bl	8004e82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040be:	2b40      	cmp	r3, #64	@ 0x40
 80040c0:	d146      	bne.n	8004150 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3308      	adds	r3, #8
 80040c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040d0:	e853 3f00 	ldrex	r3, [r3]
 80040d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3308      	adds	r3, #8
 80040ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80040ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80040fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1d9      	bne.n	80040c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004114:	2b00      	cmp	r3, #0
 8004116:	d017      	beq.n	8004148 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800411e:	4a15      	ldr	r2, [pc, #84]	@ (8004174 <HAL_UART_IRQHandler+0x2c0>)
 8004120:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004128:	4618      	mov	r0, r3
 800412a:	f7fe fcb7 	bl	8002a9c <HAL_DMA_Abort_IT>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d019      	beq.n	8004168 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800413a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004142:	4610      	mov	r0, r2
 8004144:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004146:	e00f      	b.n	8004168 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f9ff 	bl	800454c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800414e:	e00b      	b.n	8004168 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 f9fb 	bl	800454c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004156:	e007      	b.n	8004168 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f9f7 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004166:	e1dc      	b.n	8004522 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	bf00      	nop
    return;
 800416a:	e1da      	b.n	8004522 <HAL_UART_IRQHandler+0x66e>
 800416c:	10000001 	.word	0x10000001
 8004170:	04000120 	.word	0x04000120
 8004174:	08004f4f 	.word	0x08004f4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800417c:	2b01      	cmp	r3, #1
 800417e:	f040 8170 	bne.w	8004462 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004186:	f003 0310 	and.w	r3, r3, #16
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 8169 	beq.w	8004462 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 8162 	beq.w	8004462 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	2210      	movs	r2, #16
 80041a4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b0:	2b40      	cmp	r3, #64	@ 0x40
 80041b2:	f040 80d8 	bne.w	8004366 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	f000 80af 	beq.w	800432c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80041d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041d8:	429a      	cmp	r2, r3
 80041da:	f080 80a7 	bcs.w	800432c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0320 	and.w	r3, r3, #32
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 8087 	bne.w	800430a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004210:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004214:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004226:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800422a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004232:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004236:	e841 2300 	strex	r3, r2, [r1]
 800423a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800423e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1da      	bne.n	80041fc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3308      	adds	r3, #8
 800424c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004256:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3308      	adds	r3, #8
 8004266:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800426a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800426e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004272:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004276:	e841 2300 	strex	r3, r2, [r1]
 800427a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800427c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1e1      	bne.n	8004246 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3308      	adds	r3, #8
 8004288:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800428c:	e853 3f00 	ldrex	r3, [r3]
 8004290:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004292:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004294:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004298:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	3308      	adds	r3, #8
 80042a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042a6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042aa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042ae:	e841 2300 	strex	r3, r2, [r1]
 80042b2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e3      	bne.n	8004282 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042d0:	e853 3f00 	ldrex	r3, [r3]
 80042d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d8:	f023 0310 	bic.w	r3, r3, #16
 80042dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80042ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80042ec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042f2:	e841 2300 	strex	r3, r2, [r1]
 80042f6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80042f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d1e4      	bne.n	80042c8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004304:	4618      	mov	r0, r3
 8004306:	f7fe fb70 	bl	80029ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2202      	movs	r2, #2
 800430e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800431c:	b29b      	uxth	r3, r3
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	b29b      	uxth	r3, r3
 8004322:	4619      	mov	r1, r3
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f000 f91b 	bl	8004560 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800432a:	e0fc      	b.n	8004526 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004332:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004336:	429a      	cmp	r2, r3
 8004338:	f040 80f5 	bne.w	8004526 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b20      	cmp	r3, #32
 800434c:	f040 80eb 	bne.w	8004526 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800435c:	4619      	mov	r1, r3
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f8fe 	bl	8004560 <HAL_UARTEx_RxEventCallback>
      return;
 8004364:	e0df      	b.n	8004526 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004372:	b29b      	uxth	r3, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004380:	b29b      	uxth	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80d1 	beq.w	800452a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004388:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80cc 	beq.w	800452a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80043b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80043ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80043bc:	e841 2300 	strex	r3, r2, [r1]
 80043c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80043c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d1e4      	bne.n	8004392 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	e853 3f00 	ldrex	r3, [r3]
 80043d6:	623b      	str	r3, [r7, #32]
   return(result);
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3308      	adds	r3, #8
 80043ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043f0:	633a      	str	r2, [r7, #48]	@ 0x30
 80043f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e1      	bne.n	80043c8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2220      	movs	r2, #32
 8004408:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	60fb      	str	r3, [r7, #12]
   return(result);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 0310 	bic.w	r3, r3, #16
 800442c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	69b9      	ldr	r1, [r7, #24]
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	617b      	str	r3, [r7, #20]
   return(result);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e4      	bne.n	8004418 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004454:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004458:	4619      	mov	r1, r3
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f880 	bl	8004560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004460:	e063      	b.n	800452a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004466:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00e      	beq.n	800448c <HAL_UART_IRQHandler+0x5d8>
 800446e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004472:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d008      	beq.n	800448c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004482:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f000 fd9f 	bl	8004fc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800448a:	e051      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800448c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004490:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004494:	2b00      	cmp	r3, #0
 8004496:	d014      	beq.n	80044c2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d105      	bne.n	80044b0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80044a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80044a8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d03a      	beq.n	800452e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	4798      	blx	r3
    }
    return;
 80044c0:	e035      	b.n	800452e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_UART_IRQHandler+0x62e>
 80044ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fd49 	bl	8004f72 <UART_EndTransmit_IT>
    return;
 80044e0:	e026      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80044e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <HAL_UART_IRQHandler+0x64e>
 80044ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044f2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 fd78 	bl	8004ff0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004500:	e016      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004506:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <HAL_UART_IRQHandler+0x67c>
 800450e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004512:	2b00      	cmp	r3, #0
 8004514:	da0c      	bge.n	8004530 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fd60 	bl	8004fdc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800451c:	e008      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
      return;
 800451e:	bf00      	nop
 8004520:	e006      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
    return;
 8004522:	bf00      	nop
 8004524:	e004      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
      return;
 8004526:	bf00      	nop
 8004528:	e002      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
      return;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <HAL_UART_IRQHandler+0x67c>
    return;
 800452e:	bf00      	nop
  }
}
 8004530:	37e8      	adds	r7, #232	@ 0xe8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop

08004538 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004540:	bf00      	nop
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	460b      	mov	r3, r1
 800456a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004578:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800457c:	b08c      	sub	sp, #48	@ 0x30
 800457e:	af00      	add	r7, sp, #0
 8004580:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	431a      	orrs	r2, r3
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4bab      	ldr	r3, [pc, #684]	@ (8004854 <UART_SetConfig+0x2dc>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4aa0      	ldr	r2, [pc, #640]	@ (8004858 <UART_SetConfig+0x2e0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045e0:	4313      	orrs	r3, r2
 80045e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80045ee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004602:	f023 010f 	bic.w	r1, r3, #15
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a91      	ldr	r2, [pc, #580]	@ (800485c <UART_SetConfig+0x2e4>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d125      	bne.n	8004668 <UART_SetConfig+0xf0>
 800461c:	4b90      	ldr	r3, [pc, #576]	@ (8004860 <UART_SetConfig+0x2e8>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004622:	f003 0303 	and.w	r3, r3, #3
 8004626:	2b03      	cmp	r3, #3
 8004628:	d81a      	bhi.n	8004660 <UART_SetConfig+0xe8>
 800462a:	a201      	add	r2, pc, #4	@ (adr r2, 8004630 <UART_SetConfig+0xb8>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004641 	.word	0x08004641
 8004634:	08004651 	.word	0x08004651
 8004638:	08004649 	.word	0x08004649
 800463c:	08004659 	.word	0x08004659
 8004640:	2301      	movs	r3, #1
 8004642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004646:	e0d6      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004648:	2302      	movs	r3, #2
 800464a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800464e:	e0d2      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004650:	2304      	movs	r3, #4
 8004652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004656:	e0ce      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004658:	2308      	movs	r3, #8
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800465e:	e0ca      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004660:	2310      	movs	r3, #16
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004666:	e0c6      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a7d      	ldr	r2, [pc, #500]	@ (8004864 <UART_SetConfig+0x2ec>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d138      	bne.n	80046e4 <UART_SetConfig+0x16c>
 8004672:	4b7b      	ldr	r3, [pc, #492]	@ (8004860 <UART_SetConfig+0x2e8>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b0c      	cmp	r3, #12
 800467e:	d82d      	bhi.n	80046dc <UART_SetConfig+0x164>
 8004680:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <UART_SetConfig+0x110>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046bd 	.word	0x080046bd
 800468c:	080046dd 	.word	0x080046dd
 8004690:	080046dd 	.word	0x080046dd
 8004694:	080046dd 	.word	0x080046dd
 8004698:	080046cd 	.word	0x080046cd
 800469c:	080046dd 	.word	0x080046dd
 80046a0:	080046dd 	.word	0x080046dd
 80046a4:	080046dd 	.word	0x080046dd
 80046a8:	080046c5 	.word	0x080046c5
 80046ac:	080046dd 	.word	0x080046dd
 80046b0:	080046dd 	.word	0x080046dd
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046d5 	.word	0x080046d5
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046c2:	e098      	b.n	80047f6 <UART_SetConfig+0x27e>
 80046c4:	2302      	movs	r3, #2
 80046c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046ca:	e094      	b.n	80047f6 <UART_SetConfig+0x27e>
 80046cc:	2304      	movs	r3, #4
 80046ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046d2:	e090      	b.n	80047f6 <UART_SetConfig+0x27e>
 80046d4:	2308      	movs	r3, #8
 80046d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046da:	e08c      	b.n	80047f6 <UART_SetConfig+0x27e>
 80046dc:	2310      	movs	r3, #16
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80046e2:	e088      	b.n	80047f6 <UART_SetConfig+0x27e>
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a5f      	ldr	r2, [pc, #380]	@ (8004868 <UART_SetConfig+0x2f0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d125      	bne.n	800473a <UART_SetConfig+0x1c2>
 80046ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004860 <UART_SetConfig+0x2e8>)
 80046f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046f8:	2b30      	cmp	r3, #48	@ 0x30
 80046fa:	d016      	beq.n	800472a <UART_SetConfig+0x1b2>
 80046fc:	2b30      	cmp	r3, #48	@ 0x30
 80046fe:	d818      	bhi.n	8004732 <UART_SetConfig+0x1ba>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d00a      	beq.n	800471a <UART_SetConfig+0x1a2>
 8004704:	2b20      	cmp	r3, #32
 8004706:	d814      	bhi.n	8004732 <UART_SetConfig+0x1ba>
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <UART_SetConfig+0x19a>
 800470c:	2b10      	cmp	r3, #16
 800470e:	d008      	beq.n	8004722 <UART_SetConfig+0x1aa>
 8004710:	e00f      	b.n	8004732 <UART_SetConfig+0x1ba>
 8004712:	2300      	movs	r3, #0
 8004714:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004718:	e06d      	b.n	80047f6 <UART_SetConfig+0x27e>
 800471a:	2302      	movs	r3, #2
 800471c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004720:	e069      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004722:	2304      	movs	r3, #4
 8004724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004728:	e065      	b.n	80047f6 <UART_SetConfig+0x27e>
 800472a:	2308      	movs	r3, #8
 800472c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004730:	e061      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004732:	2310      	movs	r3, #16
 8004734:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004738:	e05d      	b.n	80047f6 <UART_SetConfig+0x27e>
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a4b      	ldr	r2, [pc, #300]	@ (800486c <UART_SetConfig+0x2f4>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d125      	bne.n	8004790 <UART_SetConfig+0x218>
 8004744:	4b46      	ldr	r3, [pc, #280]	@ (8004860 <UART_SetConfig+0x2e8>)
 8004746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800474e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004750:	d016      	beq.n	8004780 <UART_SetConfig+0x208>
 8004752:	2bc0      	cmp	r3, #192	@ 0xc0
 8004754:	d818      	bhi.n	8004788 <UART_SetConfig+0x210>
 8004756:	2b80      	cmp	r3, #128	@ 0x80
 8004758:	d00a      	beq.n	8004770 <UART_SetConfig+0x1f8>
 800475a:	2b80      	cmp	r3, #128	@ 0x80
 800475c:	d814      	bhi.n	8004788 <UART_SetConfig+0x210>
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <UART_SetConfig+0x1f0>
 8004762:	2b40      	cmp	r3, #64	@ 0x40
 8004764:	d008      	beq.n	8004778 <UART_SetConfig+0x200>
 8004766:	e00f      	b.n	8004788 <UART_SetConfig+0x210>
 8004768:	2300      	movs	r3, #0
 800476a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800476e:	e042      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004770:	2302      	movs	r3, #2
 8004772:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004776:	e03e      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004778:	2304      	movs	r3, #4
 800477a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800477e:	e03a      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004780:	2308      	movs	r3, #8
 8004782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004786:	e036      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004788:	2310      	movs	r3, #16
 800478a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800478e:	e032      	b.n	80047f6 <UART_SetConfig+0x27e>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a30      	ldr	r2, [pc, #192]	@ (8004858 <UART_SetConfig+0x2e0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d12a      	bne.n	80047f0 <UART_SetConfig+0x278>
 800479a:	4b31      	ldr	r3, [pc, #196]	@ (8004860 <UART_SetConfig+0x2e8>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047a8:	d01a      	beq.n	80047e0 <UART_SetConfig+0x268>
 80047aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047ae:	d81b      	bhi.n	80047e8 <UART_SetConfig+0x270>
 80047b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047b4:	d00c      	beq.n	80047d0 <UART_SetConfig+0x258>
 80047b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047ba:	d815      	bhi.n	80047e8 <UART_SetConfig+0x270>
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <UART_SetConfig+0x250>
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c4:	d008      	beq.n	80047d8 <UART_SetConfig+0x260>
 80047c6:	e00f      	b.n	80047e8 <UART_SetConfig+0x270>
 80047c8:	2300      	movs	r3, #0
 80047ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ce:	e012      	b.n	80047f6 <UART_SetConfig+0x27e>
 80047d0:	2302      	movs	r3, #2
 80047d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047d6:	e00e      	b.n	80047f6 <UART_SetConfig+0x27e>
 80047d8:	2304      	movs	r3, #4
 80047da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047de:	e00a      	b.n	80047f6 <UART_SetConfig+0x27e>
 80047e0:	2308      	movs	r3, #8
 80047e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047e6:	e006      	b.n	80047f6 <UART_SetConfig+0x27e>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80047ee:	e002      	b.n	80047f6 <UART_SetConfig+0x27e>
 80047f0:	2310      	movs	r3, #16
 80047f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a17      	ldr	r2, [pc, #92]	@ (8004858 <UART_SetConfig+0x2e0>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	f040 80a8 	bne.w	8004952 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004802:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004806:	2b08      	cmp	r3, #8
 8004808:	d834      	bhi.n	8004874 <UART_SetConfig+0x2fc>
 800480a:	a201      	add	r2, pc, #4	@ (adr r2, 8004810 <UART_SetConfig+0x298>)
 800480c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004810:	08004835 	.word	0x08004835
 8004814:	08004875 	.word	0x08004875
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004875 	.word	0x08004875
 8004820:	08004843 	.word	0x08004843
 8004824:	08004875 	.word	0x08004875
 8004828:	08004875 	.word	0x08004875
 800482c:	08004875 	.word	0x08004875
 8004830:	0800484b 	.word	0x0800484b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004834:	f7ff f88c 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004838:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800483a:	e021      	b.n	8004880 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483c:	4b0c      	ldr	r3, [pc, #48]	@ (8004870 <UART_SetConfig+0x2f8>)
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004840:	e01e      	b.n	8004880 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7ff f817 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8004846:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004848:	e01a      	b.n	8004880 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800484e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004850:	e016      	b.n	8004880 <UART_SetConfig+0x308>
 8004852:	bf00      	nop
 8004854:	cfff69f3 	.word	0xcfff69f3
 8004858:	40008000 	.word	0x40008000
 800485c:	40013800 	.word	0x40013800
 8004860:	40021000 	.word	0x40021000
 8004864:	40004400 	.word	0x40004400
 8004868:	40004800 	.word	0x40004800
 800486c:	40004c00 	.word	0x40004c00
 8004870:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004874:	2300      	movs	r3, #0
 8004876:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800487e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 812a 	beq.w	8004adc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	4a9e      	ldr	r2, [pc, #632]	@ (8004b08 <UART_SetConfig+0x590>)
 800488e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004892:	461a      	mov	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	fbb3 f3f2 	udiv	r3, r3, r2
 800489a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d305      	bcc.n	80048b8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d903      	bls.n	80048c0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048be:	e10d      	b.n	8004adc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	2200      	movs	r2, #0
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	60fa      	str	r2, [r7, #12]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004b08 <UART_SetConfig+0x590>)
 80048ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2200      	movs	r2, #0
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	607a      	str	r2, [r7, #4]
 80048da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048e2:	f7fb fc99 	bl	8000218 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	020b      	lsls	r3, r1, #8
 80048f8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048fc:	0202      	lsls	r2, r0, #8
 80048fe:	6979      	ldr	r1, [r7, #20]
 8004900:	6849      	ldr	r1, [r1, #4]
 8004902:	0849      	lsrs	r1, r1, #1
 8004904:	2000      	movs	r0, #0
 8004906:	460c      	mov	r4, r1
 8004908:	4605      	mov	r5, r0
 800490a:	eb12 0804 	adds.w	r8, r2, r4
 800490e:	eb43 0905 	adc.w	r9, r3, r5
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	469a      	mov	sl, r3
 800491a:	4693      	mov	fp, r2
 800491c:	4652      	mov	r2, sl
 800491e:	465b      	mov	r3, fp
 8004920:	4640      	mov	r0, r8
 8004922:	4649      	mov	r1, r9
 8004924:	f7fb fc78 	bl	8000218 <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004936:	d308      	bcc.n	800494a <UART_SetConfig+0x3d2>
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800493e:	d204      	bcs.n	800494a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6a3a      	ldr	r2, [r7, #32]
 8004946:	60da      	str	r2, [r3, #12]
 8004948:	e0c8      	b.n	8004adc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004950:	e0c4      	b.n	8004adc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800495a:	d167      	bne.n	8004a2c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800495c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004960:	2b08      	cmp	r3, #8
 8004962:	d828      	bhi.n	80049b6 <UART_SetConfig+0x43e>
 8004964:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <UART_SetConfig+0x3f4>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004991 	.word	0x08004991
 8004970:	08004999 	.word	0x08004999
 8004974:	080049a1 	.word	0x080049a1
 8004978:	080049b7 	.word	0x080049b7
 800497c:	080049a7 	.word	0x080049a7
 8004980:	080049b7 	.word	0x080049b7
 8004984:	080049b7 	.word	0x080049b7
 8004988:	080049b7 	.word	0x080049b7
 800498c:	080049af 	.word	0x080049af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fe ffde 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004994:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004996:	e014      	b.n	80049c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004998:	f7fe fff0 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 800499c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800499e:	e010      	b.n	80049c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049a0:	4b5a      	ldr	r3, [pc, #360]	@ (8004b0c <UART_SetConfig+0x594>)
 80049a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049a4:	e00d      	b.n	80049c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049a6:	f7fe ff65 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80049aa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80049ac:	e009      	b.n	80049c2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80049b4:	e005      	b.n	80049c2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80049b6:	2300      	movs	r3, #0
 80049b8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80049c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8089 	beq.w	8004adc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ce:	4a4e      	ldr	r2, [pc, #312]	@ (8004b08 <UART_SetConfig+0x590>)
 80049d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80049dc:	005a      	lsls	r2, r3, #1
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	085b      	lsrs	r3, r3, #1
 80049e4:	441a      	add	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	2b0f      	cmp	r3, #15
 80049f4:	d916      	bls.n	8004a24 <UART_SetConfig+0x4ac>
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049fc:	d212      	bcs.n	8004a24 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049fe:	6a3b      	ldr	r3, [r7, #32]
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	f023 030f 	bic.w	r3, r3, #15
 8004a06:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a08:	6a3b      	ldr	r3, [r7, #32]
 8004a0a:	085b      	lsrs	r3, r3, #1
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	8bfb      	ldrh	r3, [r7, #30]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	8bfa      	ldrh	r2, [r7, #30]
 8004a20:	60da      	str	r2, [r3, #12]
 8004a22:	e05b      	b.n	8004adc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004a2a:	e057      	b.n	8004adc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a2c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d828      	bhi.n	8004a86 <UART_SetConfig+0x50e>
 8004a34:	a201      	add	r2, pc, #4	@ (adr r2, 8004a3c <UART_SetConfig+0x4c4>)
 8004a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3a:	bf00      	nop
 8004a3c:	08004a61 	.word	0x08004a61
 8004a40:	08004a69 	.word	0x08004a69
 8004a44:	08004a71 	.word	0x08004a71
 8004a48:	08004a87 	.word	0x08004a87
 8004a4c:	08004a77 	.word	0x08004a77
 8004a50:	08004a87 	.word	0x08004a87
 8004a54:	08004a87 	.word	0x08004a87
 8004a58:	08004a87 	.word	0x08004a87
 8004a5c:	08004a7f 	.word	0x08004a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a60:	f7fe ff76 	bl	8003950 <HAL_RCC_GetPCLK1Freq>
 8004a64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a66:	e014      	b.n	8004a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a68:	f7fe ff88 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004a6c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a6e:	e010      	b.n	8004a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a70:	4b26      	ldr	r3, [pc, #152]	@ (8004b0c <UART_SetConfig+0x594>)
 8004a72:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a74:	e00d      	b.n	8004a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a76:	f7fe fefd 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8004a7a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004a7c:	e009      	b.n	8004a92 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004a84:	e005      	b.n	8004a92 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004a90:	bf00      	nop
    }

    if (pclk != 0U)
 8004a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d021      	beq.n	8004adc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <UART_SetConfig+0x590>)
 8004a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa6:	fbb3 f2f2 	udiv	r2, r3, r2
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	441a      	add	r2, r3
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	2b0f      	cmp	r3, #15
 8004ac0:	d909      	bls.n	8004ad6 <UART_SetConfig+0x55e>
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ac8:	d205      	bcs.n	8004ad6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	60da      	str	r2, [r3, #12]
 8004ad4:	e002      	b.n	8004adc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2200      	movs	r2, #0
 8004af0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2200      	movs	r2, #0
 8004af6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004af8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3730      	adds	r7, #48	@ 0x30
 8004b00:	46bd      	mov	sp, r7
 8004b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b06:	bf00      	nop
 8004b08:	08005294 	.word	0x08005294
 8004b0c:	00f42400 	.word	0x00f42400

08004b10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00a      	beq.n	8004b3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	430a      	orrs	r2, r1
 8004b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d00a      	beq.n	8004bc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc6:	f003 0320 	and.w	r3, r3, #32
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	430a      	orrs	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d01a      	beq.n	8004c26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c0e:	d10a      	bne.n	8004c26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	430a      	orrs	r2, r1
 8004c24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	605a      	str	r2, [r3, #4]
  }
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b098      	sub	sp, #96	@ 0x60
 8004c58:	af02      	add	r7, sp, #8
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c64:	f7fb fff0 	bl	8000c48 <HAL_GetTick>
 8004c68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d12f      	bne.n	8004cd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004c80:	2200      	movs	r2, #0
 8004c82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f88e 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d022      	beq.n	8004cd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9a:	e853 3f00 	ldrex	r3, [r3]
 8004c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ca6:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cb2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004cb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cb8:	e841 2300 	strex	r3, r2, [r1]
 8004cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004cbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1e6      	bne.n	8004c92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e063      	b.n	8004da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0304 	and.w	r3, r3, #4
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d149      	bne.n	8004d7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ce6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f857 	bl	8004da8 <UART_WaitOnFlagUntilTimeout>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d03c      	beq.n	8004d7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d08:	e853 3f00 	ldrex	r3, [r3]
 8004d0c:	623b      	str	r3, [r7, #32]
   return(result);
 8004d0e:	6a3b      	ldr	r3, [r7, #32]
 8004d10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004d20:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d26:	e841 2300 	strex	r3, r2, [r1]
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1e6      	bne.n	8004d00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3308      	adds	r3, #8
 8004d38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	e853 3f00 	ldrex	r3, [r3]
 8004d40:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d52:	61fa      	str	r2, [r7, #28]
 8004d54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	69b9      	ldr	r1, [r7, #24]
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	617b      	str	r3, [r7, #20]
   return(result);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e5      	bne.n	8004d32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2220      	movs	r2, #32
 8004d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	e012      	b.n	8004da0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2220      	movs	r2, #32
 8004d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3758      	adds	r7, #88	@ 0x58
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	603b      	str	r3, [r7, #0]
 8004db4:	4613      	mov	r3, r2
 8004db6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004db8:	e04f      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc0:	d04b      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc2:	f7fb ff41 	bl	8000c48 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d302      	bcc.n	8004dd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d101      	bne.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e04e      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d037      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	2b80      	cmp	r3, #128	@ 0x80
 8004dee:	d034      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	2b40      	cmp	r3, #64	@ 0x40
 8004df4:	d031      	beq.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f003 0308 	and.w	r3, r3, #8
 8004e00:	2b08      	cmp	r3, #8
 8004e02:	d110      	bne.n	8004e26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2208      	movs	r2, #8
 8004e0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f000 f838 	bl	8004e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2208      	movs	r2, #8
 8004e16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e029      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e34:	d111      	bne.n	8004e5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 f81e 	bl	8004e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00f      	b.n	8004e7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69da      	ldr	r2, [r3, #28]
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	4013      	ands	r3, r2
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	bf0c      	ite	eq
 8004e6a:	2301      	moveq	r3, #1
 8004e6c:	2300      	movne	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	79fb      	ldrb	r3, [r7, #7]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d0a0      	beq.n	8004dba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3710      	adds	r7, #16
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b095      	sub	sp, #84	@ 0x54
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ea8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eaa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004eae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e6      	bne.n	8004e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ed2:	f023 0301 	bic.w	r3, r3, #1
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	3308      	adds	r3, #8
 8004ede:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e3      	bne.n	8004ebc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d118      	bne.n	8004f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f023 0310 	bic.w	r3, r3, #16
 8004f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1e:	6979      	ldr	r1, [r7, #20]
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	613b      	str	r3, [r7, #16]
   return(result);
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1e6      	bne.n	8004efc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f42:	bf00      	nop
 8004f44:	3754      	adds	r7, #84	@ 0x54
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f7ff faf1 	bl	800454c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b088      	sub	sp, #32
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f8e:	61fb      	str	r3, [r7, #28]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	6979      	ldr	r1, [r7, #20]
 8004f9e:	69ba      	ldr	r2, [r7, #24]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2220      	movs	r2, #32
 8004fb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f7ff fabc 	bl	8004538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fc0:	bf00      	nop
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_UARTEx_DisableFifoMode+0x16>
 8005016:	2302      	movs	r3, #2
 8005018:	e027      	b.n	800506a <HAL_UARTEx_DisableFifoMode+0x66>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2224      	movs	r2, #36	@ 0x24
 8005026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0201 	bic.w	r2, r2, #1
 8005040:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005048:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b084      	sub	sp, #16
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
 800507e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800508a:	2302      	movs	r3, #2
 800508c:	e02d      	b.n	80050ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	@ 0x24
 800509a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0201 	bic.w	r2, r2, #1
 80050b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f850 	bl	8005170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005102:	2b01      	cmp	r3, #1
 8005104:	d101      	bne.n	800510a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005106:	2302      	movs	r3, #2
 8005108:	e02d      	b.n	8005166 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2224      	movs	r2, #36	@ 0x24
 8005116:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f022 0201 	bic.w	r2, r2, #1
 8005130:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f812 	bl	8005170 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800517c:	2b00      	cmp	r3, #0
 800517e:	d108      	bne.n	8005192 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005190:	e031      	b.n	80051f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005192:	2308      	movs	r3, #8
 8005194:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005196:	2308      	movs	r3, #8
 8005198:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	0e5b      	lsrs	r3, r3, #25
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	0f5b      	lsrs	r3, r3, #29
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	f003 0307 	and.w	r3, r3, #7
 80051b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051ba:	7bbb      	ldrb	r3, [r7, #14]
 80051bc:	7b3a      	ldrb	r2, [r7, #12]
 80051be:	4911      	ldr	r1, [pc, #68]	@ (8005204 <UARTEx_SetNbDataToProcess+0x94>)
 80051c0:	5c8a      	ldrb	r2, [r1, r2]
 80051c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80051c6:	7b3a      	ldrb	r2, [r7, #12]
 80051c8:	490f      	ldr	r1, [pc, #60]	@ (8005208 <UARTEx_SetNbDataToProcess+0x98>)
 80051ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80051cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
 80051da:	7b7a      	ldrb	r2, [r7, #13]
 80051dc:	4909      	ldr	r1, [pc, #36]	@ (8005204 <UARTEx_SetNbDataToProcess+0x94>)
 80051de:	5c8a      	ldrb	r2, [r1, r2]
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80051e4:	7b7a      	ldrb	r2, [r7, #13]
 80051e6:	4908      	ldr	r1, [pc, #32]	@ (8005208 <UARTEx_SetNbDataToProcess+0x98>)
 80051e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80051ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80051f6:	bf00      	nop
 80051f8:	3714      	adds	r7, #20
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	080052ac 	.word	0x080052ac
 8005208:	080052b4 	.word	0x080052b4

0800520c <memset>:
 800520c:	4402      	add	r2, r0
 800520e:	4603      	mov	r3, r0
 8005210:	4293      	cmp	r3, r2
 8005212:	d100      	bne.n	8005216 <memset+0xa>
 8005214:	4770      	bx	lr
 8005216:	f803 1b01 	strb.w	r1, [r3], #1
 800521a:	e7f9      	b.n	8005210 <memset+0x4>

0800521c <__libc_init_array>:
 800521c:	b570      	push	{r4, r5, r6, lr}
 800521e:	4d0d      	ldr	r5, [pc, #52]	@ (8005254 <__libc_init_array+0x38>)
 8005220:	4c0d      	ldr	r4, [pc, #52]	@ (8005258 <__libc_init_array+0x3c>)
 8005222:	1b64      	subs	r4, r4, r5
 8005224:	10a4      	asrs	r4, r4, #2
 8005226:	2600      	movs	r6, #0
 8005228:	42a6      	cmp	r6, r4
 800522a:	d109      	bne.n	8005240 <__libc_init_array+0x24>
 800522c:	4d0b      	ldr	r5, [pc, #44]	@ (800525c <__libc_init_array+0x40>)
 800522e:	4c0c      	ldr	r4, [pc, #48]	@ (8005260 <__libc_init_array+0x44>)
 8005230:	f000 f818 	bl	8005264 <_init>
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	2600      	movs	r6, #0
 800523a:	42a6      	cmp	r6, r4
 800523c:	d105      	bne.n	800524a <__libc_init_array+0x2e>
 800523e:	bd70      	pop	{r4, r5, r6, pc}
 8005240:	f855 3b04 	ldr.w	r3, [r5], #4
 8005244:	4798      	blx	r3
 8005246:	3601      	adds	r6, #1
 8005248:	e7ee      	b.n	8005228 <__libc_init_array+0xc>
 800524a:	f855 3b04 	ldr.w	r3, [r5], #4
 800524e:	4798      	blx	r3
 8005250:	3601      	adds	r6, #1
 8005252:	e7f2      	b.n	800523a <__libc_init_array+0x1e>
 8005254:	080052c4 	.word	0x080052c4
 8005258:	080052c4 	.word	0x080052c4
 800525c:	080052c4 	.word	0x080052c4
 8005260:	080052c8 	.word	0x080052c8

08005264 <_init>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr

08005270 <_fini>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr
